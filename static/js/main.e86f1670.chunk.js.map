{"version":3,"sources":["components/InputWithButton/InputWithButton.module.css","components/TasksMap/TaskMap.module.css","api/todolist-api.ts","store/reducers/auth/authReducer.ts","utils/error_utils.ts","store/reducers/app/appReducer.ts","store/reducers/todolists/todolistReducer.ts","store/reducers/tasks/tasksReducer.ts","store/store.ts","components/ErrorSnackar/ErrorSnackbar.tsx","components/InputWithButton/InputWithButton.tsx","components/EditableSpan/EditableSpan.tsx","components/TasksMap/Task/Task.tsx","components/TasksMap/TasksMap.tsx","components/Todolist/Todolist.tsx","components/TodolistList/TodolistList.tsx","components/Login/Login.tsx","components/Preloader/Preloader.tsx","App.tsx","index.tsx","components/Todolist/Todolist.module.css","components/Login/Login.module.css","App.module.css","components/TasksMap/Task/Task.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","RESULT_CODES","AUTH_ACTIONS_TYPES","todoInstance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","then","response","data","title","post","todolistId","delete","put","taskId","model","authAPI","handleNetworkAppError","dispatch","error","setAppErrorMessageAC","message","handleServerAppError","messages","length","APP_ACTIONS_TYPES","initialState","isLoggedIn","setIsLoggedInAC","type","SET_IS_LOGGED_IN","payload","TODOLISTS_ACTIONS_TYPES","initialAppState","status","errorMessage","isInitialized","setAppStatusAC","SET_APP_STATUS","SET_APP_ERROR_MESSAGE","initializeApp","resultCode","success","catch","finally","SET_IS_INITIALIZED_APP","TASKS_ACTIONS_TYPES","changeToDoListsEntityStatusAC","entityStatus","CHANGE_TODOLIST_ENTITY_STATUS","resetTodolistsDataAC","RESET_TODOLISTS_DATA","getToDoLists","todolists","SET_TODOLISTS","forEach","todolist","getTasks","id","createTodolist","item","ADD_TODOLIST","removeTodolist","todolistID","REMOVE_TODOLIST","updateTodolistTitle","newTitle","UPDATE_TODOLIST_TITLE","tasks","SET_TASKS","setTasksAC","items","removeTask","REMOVE_TASK","addTask","task","ADD_TASK","updateTask","getState","currentTask","find","modelStatus","deadline","description","priority","startDate","UPDATE_TASK","updateTaskAC","rootReducer","combineReducers","state","action","todoListId","filter","map","stateCopy","td","CHANGE_TODOLIST_FILTER","filterType","app","auth","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","window","Alert","React","props","ref","elevation","variant","ErrorSnackbar","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","InputWithButton","memo","addItem","inputLabel","disabled","useState","inputTitleValue","setInputTitleValue","setError","onChangeInput","useCallback","currentTarget","value","onButtonClick","trim","onKeyPressAddTaskHandler","key","TextField","onChange","onKeyPress","helperText","size","label","style","borderColor","className","textField","Fab","marginLeft","backgroundColor","color","onClick","EditableSpan","updateTitle","labelInput","editMode","setEditMode","spanTitle","setSpanTitle","onBlurHandler","onKeyPressHandler","onChangeHandler","e","autoFocus","onBlur","onDoubleClick","Task","taskID","onUpdateTaskTitleHandler","onUpdateTaskStatus","checked","Completed","New","onClickRemovingTaskHandler","isDone","Checkbox","IconButton","removeButton","TasksMap","filteredTasks","taskWrapper","Todolist","onClickFilterType","changeFilterAC","isDisabled","todolistWrapper","Paper","padding","todolistHeader","inputWithButtonBlock","buttonName","newTitleTask","buttonsBlock","ButtonGroup","Button","TodolistList","useEffect","Grid","container","justifyContent","margin","marginBottom","newTodolistTitle","spacing","to","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","minHeight","handleSubmit","FormControl","FormLabel","href","target","FormGroup","fieldWrapper","getFieldProps","touched","messageError","FormControlLabel","control","Preloader","Box","display","height","alignItems","CircularProgress","App","AppBar","position","boxShadow","Toolbar","edge","mr","Typography","component","flexGrow","progressBar","LinearProgress","Container","fixed","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e86f1670.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textField\":\"InputWithButton_textField__3ozey\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskWrapper\":\"TaskMap_taskWrapper__1qCan\"};","import axios, {AxiosResponse} from \"axios\";\r\n\r\nexport type TodolistResponseType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    data: T\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    resultCode: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    items: TaskType []\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport enum RESULT_CODES {\r\n    success = 0,\r\n    error = 1,\r\n    captchaIsRequired = 10\r\n}\r\n\r\nexport type LoginPayloadDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\nexport type MeDataResponseType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nconst todoInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"10732160-f45a-4879-8e6f-b2819bc13c24\"\r\n    }\r\n})\r\n\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return todoInstance.get<TodolistResponseType[]>('todo-lists')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    createTodolist(title: string) {\r\n        return todoInstance.post<any, AxiosResponse<ResponseType<{ item: TodolistResponseType }>>, { title: string }>('todo-lists', {title})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return todoInstance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return todoInstance.put<any, AxiosResponse<ResponseType>, { title: string }>(`todo-lists/${todolistId}`, {title})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return todoInstance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return todoInstance.post<any, AxiosResponse<ResponseType<{ item: TaskType }>>, { title: string }>(`todo-lists/${todolistId}/tasks`, {title})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    removeTask(todolistId: string, taskId: string) {\r\n        return todoInstance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return todoInstance.put<any, AxiosResponse<ResponseType<TaskType>>, UpdateTaskModelType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginPayloadDataType) {\r\n        return todoInstance.post<ResponseType, AxiosResponse<ResponseType<{ userId: number }>>, LoginPayloadDataType>('auth/login', data)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    me() {\r\n        return todoInstance.get<ResponseType<MeDataResponseType>>('auth/me')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logout() {\r\n        return todoInstance.delete<ResponseType>('auth/login')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}","import {AppThunk} from '../../store';\r\nimport {setAppStatusAC} from '../app/appReducer';\r\nimport {authAPI, LoginPayloadDataType, RESULT_CODES} from '../../../api/todolist-api';\r\nimport {AxiosError} from 'axios';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {resetTodolistsDataAC} from '../todolists/todolistReducer';\r\n\r\nexport enum AUTH_ACTIONS_TYPES {\r\n    SET_IS_LOGGED_IN = 'AUTH/SET_IS_LOGGED_IN'\r\n}\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nexport type AuthInitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: AuthInitialStateType = initialState, action: GeneralAuthACType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case AUTH_ACTIONS_TYPES.SET_IS_LOGGED_IN:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\nexport type GeneralAuthACType =\r\n    |ReturnType<typeof setIsLoggedInAC>\r\n\r\n\r\n// A C T I O N S\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({\r\n    type: AUTH_ACTIONS_TYPES.SET_IS_LOGGED_IN,\r\n    payload: {isLoggedIn}\r\n} as const);\r\n\r\n\r\n// T H U N K S\r\nexport const login = (data: Omit<LoginPayloadDataType, 'captcha'>): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((data) => {\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(dispatch, data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const logout = (): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('idle'))\r\n    authAPI.logout()\r\n        .then(data => {\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(resetTodolistsDataAC())\r\n            } else {\r\n                handleServerAppError(dispatch, data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\n","import {setAppErrorMessageAC} from '../store/reducers/app/appReducer';\r\nimport {Dispatch} from 'redux';\r\nimport {AppActionsType} from '../store/store';\r\nimport {ResponseType, TaskType, TodolistResponseType} from '../api/todolist-api';\r\n\r\nexport const handleNetworkAppError = (dispatch: Dispatch<AppActionsType>, error: { message: string }) => {\r\n    dispatch(setAppErrorMessageAC(error.message ? error.message : 'Some error'))\r\n}\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<AppActionsType>, data: ResponseType<T>) => {\r\n    dispatch(setAppErrorMessageAC(data.messages.length ? data.messages[0] : 'Some error occurred'))\r\n}\r\n","import {AppThunk, NullableType} from '../../store';\r\nimport {authAPI, RESULT_CODES} from '../../../api/todolist-api';\r\nimport {setIsLoggedInAC} from '../auth/authReducer';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {AxiosError} from 'axios';\r\n\r\nenum APP_ACTIONS_TYPES {\r\n    SET_APP_STATUS = 'APP/SET_STATUS',\r\n    SET_APP_ERROR_MESSAGE = 'APP/SET_ERROR_MESSAGE',\r\n    SET_IS_INITIALIZED_APP = 'APP/SET_IS_INITIALIZED_APP'\r\n}\r\n\r\nconst initialAppState = {\r\n    status: 'idle' as RequestStatusType,\r\n    errorMessage: null as NullableType<string>,\r\n    isInitialized:false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialAppState, action: GeneralAppActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case APP_ACTIONS_TYPES.SET_APP_STATUS:\r\n        case APP_ACTIONS_TYPES.SET_APP_ERROR_MESSAGE:\r\n        case APP_ACTIONS_TYPES.SET_IS_INITIALIZED_APP:\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// A C T I O N S\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: APP_ACTIONS_TYPES.SET_APP_STATUS,\r\n    payload: {status}\r\n} as const)\r\nexport const setAppErrorMessageAC = (errorMessage: NullableType<string>) => ({\r\n    type: APP_ACTIONS_TYPES.SET_APP_ERROR_MESSAGE,\r\n    payload: {errorMessage}\r\n} as const)\r\nexport const setIsInitializedAppAC = (isInitialized: boolean) => ({\r\n    type: APP_ACTIONS_TYPES.SET_IS_INITIALIZED_APP,\r\n    payload: {isInitialized}\r\n} as const)\r\n\r\n// T H U N K S\r\nexport const initializeApp = (): AppThunk => dispatch => {\r\n    authAPI.me()\r\n        .then(data => {\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(dispatch, data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setIsInitializedAppAC(true))\r\n        })\r\n}\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialAppStateType = typeof initialAppState\r\nexport type  GeneralAppActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorMessageAC>\r\n    | ReturnType<typeof setIsInitializedAppAC>","import {RESULT_CODES, todolistAPI, TodolistResponseType} from \"../../../api/todolist-api\";\r\nimport {AppThunk} from '../../store';\r\nimport {RequestStatusType, setAppStatusAC} from '../app/appReducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {getTasks} from '../tasks/tasksReducer';\r\n\r\nexport enum TODOLISTS_ACTIONS_TYPES {\r\n    CHANGE_TODOLIST_FILTER = 'TODOLIST/CHANGE-FILTER',\r\n    REMOVE_TODOLIST = 'TODOLIST/REMOVE-TODOLIST',\r\n    ADD_TODOLIST = 'TODOLIST/ADD_TODOLIST',\r\n    UPDATE_TODOLIST_TITLE = 'TODOLIST/UPDATE_TODOLIST_TITLE',\r\n    SET_TODOLISTS = 'TODOLIST/SET_TODOLISTS',\r\n    CHANGE_TODOLIST_ENTITY_STATUS = 'TODOLIST/CHANGE_TODOLIST_ENTITY_STATUS',\r\n    RESET_TODOLISTS_DATA = 'TODOLIST/RESET_TODOLISTS_DATA',\r\n}\r\n\r\nexport type FilterValueType = 'All' | 'Active' | 'Completed'\r\nexport type TodolistType = TodolistResponseType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType,\r\n}\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: GeneralTodolistsACType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case TODOLISTS_ACTIONS_TYPES.CHANGE_TODOLIST_FILTER:\r\n            return state.map(td => td.id === action.payload.todolistID ? {\r\n                ...td,\r\n                filter: action.payload.filterType\r\n            } : td);\r\n        case TODOLISTS_ACTIONS_TYPES.REMOVE_TODOLIST:\r\n            return state.filter(td => td.id !== action.payload.todolistID);\r\n        case TODOLISTS_ACTIONS_TYPES.ADD_TODOLIST:\r\n            return [{...action.payload.todolist, filter: \"All\", entityStatus: 'idle'}, ...state]\r\n        case TODOLISTS_ACTIONS_TYPES.UPDATE_TODOLIST_TITLE:\r\n            return state.map(td => td.id === action.payload.todolistID ? {...td, title: action.payload.newTitle} : td)\r\n        case TODOLISTS_ACTIONS_TYPES.SET_TODOLISTS:\r\n            return action.payload.todolists.map(td => ({...td, filter: 'All', entityStatus: 'idle'}))\r\n        case TODOLISTS_ACTIONS_TYPES.CHANGE_TODOLIST_ENTITY_STATUS:\r\n            return state.map((td => td.id === action.payload.todolistId ?\r\n                {...td, entityStatus: action.payload.entityStatus} : td))\r\n        case TODOLISTS_ACTIONS_TYPES.RESET_TODOLISTS_DATA:\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n};\r\nexport type  AddTodolistType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsType = ReturnType<typeof setToDoListsAC>\r\nexport type ResetTodolistsDataType = ReturnType<typeof resetTodolistsDataAC>\r\n\r\nexport type GeneralTodolistsACType =\r\n    | ReturnType<typeof changeFilterAC>\r\n    | RemoveTodolistType\r\n    | AddTodolistType\r\n    | ReturnType<typeof updateTodolistTitleAC>\r\n    | SetTodolistsType\r\n    | ReturnType<typeof changeToDoListsEntityStatusAC>\r\n    | ResetTodolistsDataType\r\n\r\n// A C T I O N S\r\nexport const changeFilterAC = (todolistID: string, filterType: FilterValueType) => ({\r\n    type: TODOLISTS_ACTIONS_TYPES.CHANGE_TODOLIST_FILTER,\r\n    payload: {todolistID, filterType}\r\n} as const);\r\nexport const removeTodolistAC = (todolistID: string) => ({\r\n    type: TODOLISTS_ACTIONS_TYPES.REMOVE_TODOLIST,\r\n    payload: {todolistID}\r\n} as const);\r\nexport const addTodolistAC = (todolist: TodolistResponseType) => ({\r\n    type: TODOLISTS_ACTIONS_TYPES.ADD_TODOLIST,\r\n    payload: {todolist}\r\n} as const);\r\nexport const updateTodolistTitleAC = (todolistID: string, newTitle: string) => ({\r\n    type: TODOLISTS_ACTIONS_TYPES.UPDATE_TODOLIST_TITLE,\r\n    payload: {todolistID, newTitle}\r\n} as const);\r\nexport const setToDoListsAC = (todolists: TodolistResponseType[]) => ({\r\n    type: TODOLISTS_ACTIONS_TYPES.SET_TODOLISTS,\r\n    payload: {todolists}\r\n} as const);\r\nexport const changeToDoListsEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => ({\r\n    type: TODOLISTS_ACTIONS_TYPES.CHANGE_TODOLIST_ENTITY_STATUS,\r\n    payload: {todolistId, entityStatus}\r\n} as const)\r\nexport const resetTodolistsDataAC = () => ({\r\n    type: TODOLISTS_ACTIONS_TYPES.RESET_TODOLISTS_DATA\r\n} as const)\r\n\r\n// T H U N K S\r\nexport const getToDoLists = (): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then(data => {\r\n            dispatch(setToDoListsAC(data))\r\n            return data\r\n        })\r\n        .then(data => {\r\n            data.forEach((todolist => {\r\n                dispatch(getTasks(todolist.id))\r\n            }))\r\n        })\r\n        .catch(error => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const createTodolist = (title: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then(data => {\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                dispatch(addTodolistAC(data.data.item))\r\n            } else {\r\n                handleServerAppError(dispatch, data)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n\r\n}\r\nexport const removeTodolist = (todolistId: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeToDoListsEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(data => {\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            } else {\r\n                handleServerAppError(dispatch, data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(changeToDoListsEntityStatusAC(todolistId, 'succeeded'))\r\n        })\r\n}\r\nexport const updateTodolistTitle = (todolistId: string, title: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then(data => {\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                dispatch(updateTodolistTitleAC(todolistId, title))\r\n            } else {\r\n                handleServerAppError(dispatch, data)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}","import {\r\n    AddTodolistType,\r\n    RemoveTodolistType, ResetTodolistsDataType,\r\n    SetTodolistsType,\r\n    TODOLISTS_ACTIONS_TYPES\r\n} from \"../todolists/todolistReducer\";\r\nimport {RESULT_CODES, TaskType, todolistAPI, UpdateTaskModelType} from \"../../../api/todolist-api\";\r\nimport {AppThunk} from '../../store';\r\nimport {setAppStatusAC} from '../app/appReducer';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\n\r\nexport enum TASKS_ACTIONS_TYPES {\r\n    ADD_TASK = 'TASK/ADD_TASK',\r\n    REMOVE_TASK = 'TASK/REMOVE_TASK',\r\n    SET_TASKS = 'TASK/SET_TASKS',\r\n    UPDATE_TASK = 'TASK/UPDATE_TASK'\r\n}\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksType = {}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: GeneralTasksACType): TasksType => {\r\n    switch (action.type) {\r\n        case TASKS_ACTIONS_TYPES.ADD_TASK:\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\r\n            }\r\n        case TASKS_ACTIONS_TYPES.REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistID]: state[action.payload.todolistID]\r\n                    .filter(task => task.id !== action.payload.id)\r\n            }\r\n        case TASKS_ACTIONS_TYPES.UPDATE_TASK:\r\n            return {\r\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(task => task.id === action.payload.taskId ?\r\n                        {...task, ...action.payload.model} : task)\r\n            }\r\n        case TODOLISTS_ACTIONS_TYPES.ADD_TODOLIST:\r\n            return {\r\n                ...state, [action.payload.todolist.id]: []\r\n            }\r\n        case TODOLISTS_ACTIONS_TYPES.REMOVE_TODOLIST:\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.payload.todolistID]\r\n            return stateCopy\r\n        case TODOLISTS_ACTIONS_TYPES.SET_TODOLISTS: {\r\n            const stateCopy = {...state}\r\n            action.payload.todolists.forEach(td => stateCopy[td.id] = [])\r\n            return stateCopy\r\n        }\r\n        case TASKS_ACTIONS_TYPES.SET_TASKS: {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistID]: action.payload.tasks\r\n            }\r\n        }\r\n        case TODOLISTS_ACTIONS_TYPES.RESET_TODOLISTS_DATA:\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport type AddTaskType = ReturnType<typeof addTaskAC>\r\nexport type RemoveTaskType = ReturnType<typeof removeTaskAC>\r\n\r\nexport type GeneralTasksACType =\r\n    | AddTaskType\r\n    | RemoveTaskType\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n    | SetTodolistsType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ResetTodolistsDataType\r\n\r\n\r\n// A C T I O N S\r\nexport const addTaskAC = (task: TaskType) => ({\r\n    type: TASKS_ACTIONS_TYPES.ADD_TASK,\r\n    payload: {task}\r\n} as const);\r\nexport const removeTaskAC = (todolistID: string, id: string) => ({\r\n    type: TASKS_ACTIONS_TYPES.REMOVE_TASK,\r\n    payload: {todolistID, id}\r\n} as const);\r\nexport const setTasksAC = (tasks: TaskType[], todolistID: string) => ({\r\n    type: TASKS_ACTIONS_TYPES.SET_TASKS,\r\n    payload: {tasks, todolistID}\r\n} as const);\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateTaskDomainModelType) => ({\r\n    type: TASKS_ACTIONS_TYPES.UPDATE_TASK,\r\n    payload: {todolistId, taskId, model}\r\n} as const);\r\n\r\n// T H U N K S\r\nexport const getTasks = (todolistID: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistID)\r\n        .then(data => {\r\n            dispatch(setTasksAC(data.items, todolistID))\r\n        })\r\n        .catch(error => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTask = (todolistId: string, taskId: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.removeTask(todolistId, taskId)\r\n        .then(data => {\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                dispatch(removeTaskAC(todolistId, taskId))\r\n            } else {\r\n                handleServerAppError(dispatch, data)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const addTask = (todolistId: string, title: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(data => {\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                dispatch(addTaskAC(data.data.item))\r\n            } else {\r\n                handleServerAppError(dispatch, data)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkAppError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport type UpdateTaskDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport const updateTask = (todolistId: string, taskId: string, model: UpdateTaskDomainModelType): AppThunk => (dispatch, getState) => {\r\n    const currentTask = getState().tasks[todolistId].find(task => task.id === taskId)\r\n    if (currentTask) {\r\n        const modelStatus: UpdateTaskModelType = {\r\n            deadline: currentTask.deadline,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            startDate: currentTask.startDate,\r\n            status: currentTask.status,\r\n            title: currentTask.title,\r\n            ...model\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, modelStatus)\r\n            .then(data => {\r\n                if (data.resultCode === RESULT_CODES.success) {\r\n                    dispatch(updateTaskAC(todolistId, taskId, model))\r\n                } else {\r\n                    handleServerAppError(dispatch, data)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleNetworkAppError(dispatch, error)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}","import {GeneralTasksACType, tasksReducer} from \"./reducers/tasks/tasksReducer\";\r\nimport {GeneralTodolistsACType, todolistsReducer} from \"./reducers/todolists/todolistReducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {appReducer, GeneralAppActionsType} from './reducers/app/appReducer';\r\nimport {authReducer, GeneralAuthACType} from './reducers/auth/authReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth:authReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppActionsType =\r\n    | GeneralTasksACType\r\n    | GeneralTodolistsACType\r\n    | GeneralAppActionsType\r\n    | GeneralAuthACType\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\nexport type NullableType<T> = null | T\r\n//@ts-ignore\r\nwindow.store = store","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {AppThunk, useAppSelector} from '../../store/store';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setAppErrorMessageAC} from '../../store/reducers/app/appReducer';\r\nimport {Dispatch} from 'redux';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar =() => {\r\n    const errorMessage = useAppSelector(state => state.app.errorMessage)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorMessageAC(null))\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={errorMessage !== null} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {errorMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport Fab from \"@mui/material/Fab\";\nimport TextField from \"@mui/material/TextField\";\nimport Add from \"@mui/icons-material/Add\";\nimport style from './InputWithButton.module.css'\n\n\nexport type InputWithButtonPropsType = {\n    buttonName: string\n    addItem: (inputTitleValue: string) => void\n    inputLabel: string\n    disabled?: boolean\n}\n\nexport const InputWithButton = React.memo(({\n                                               addItem,\n                                               inputLabel,\n                                               disabled,\n                                               ...props\n                                           }: InputWithButtonPropsType) => {\n\n    //local state for input\n    const [inputTitleValue, setInputTitleValue] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    const onChangeInput = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        setInputTitleValue(event.currentTarget.value);\n        if (error) {\n            setError(false);\n        }\n\n    }, [error]);\n\n    //functionality for button\n    const onButtonClick = useCallback(() => {\n        if (inputTitleValue.trim()) {\n            addItem(inputTitleValue.trim());\n            setInputTitleValue('')\n        } else {\n            setError(true)\n        }\n    }, [addItem, inputTitleValue]);\n    const onKeyPressAddTaskHandler = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            onButtonClick();\n        }\n    }, [onButtonClick]);\n    return (\n        <div>\n            <TextField error={error}\n                       onChange={onChangeInput}\n                       value={inputTitleValue}\n                       onKeyPress={onKeyPressAddTaskHandler}\n                       helperText={error ? 'Field is required' : null}\n                       size={\"small\"} id=\"outlined-basic\"\n                       label={inputLabel}\n                       variant=\"outlined\"\n                       disabled={disabled}\n                       style={{borderColor: '#6D88B8'}}\n            className={style.textField}/>\n            <Fab style={{marginLeft: \"15px\", backgroundColor: '#6D88B8', color: '#ffffff'}}\n                 onClick={onButtonClick}\n                 aria-label=\"add\" size={\"small\"}\n                 disabled={disabled}>\n                <Add/>\n            </Fab>\n        </div>\n    );\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport TextField from \"@mui/material/TextField\";\n\ntype EditableSpanPropsType = {\n    title: string\n    updateTitle: (newTitle: string) => void\n    labelInput: string\n}\n\nexport const EditableSpan = React.memo(({\n                                            title,\n                                            updateTitle,\n                                            labelInput,\n                                        }: EditableSpanPropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [spanTitle, setSpanTitle] = useState(title);\n    const [error, setError] = useState<boolean>(false);\n    const onDoubleClickHandler = () => {\n        setEditMode(true);\n    };\n\n    const onBlurHandler = useCallback(() => {\n        if (spanTitle.trim()) {\n            setEditMode(false);\n            updateTitle(spanTitle)\n        } else {\n            setError(true)\n        }\n    }, [updateTitle, spanTitle]);\n\n    const onKeyPressHandler = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            onBlurHandler()\n        }\n    }, [onBlurHandler]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setSpanTitle(e.currentTarget.value);\n        if (error) {\n            setError(false);\n        }\n\n    }, [error]);\n    return (\n        <>\n            {editMode ?\n                <div>\n                    {/*<input className={error ? style.error : style.addTaskInput} onKeyPress={onKeyPressHandler} autoFocus\n                           onBlur={onBlurHandler} value={title}\n                           onChange={onChangeHandler}/>\n                    {error && <div className={style.errorMessage}>Field is required</div>}*/}\n                    <TextField onKeyPress={onKeyPressHandler}\n                               autoFocus\n                               onBlur={onBlurHandler} value={spanTitle}\n                               onChange={onChangeHandler} id=\"standard-basic\"\n                               label={labelInput}\n                               variant=\"standard\"\n                               size={\"small\"}\n                               error={error}\n                               helperText={error ? \"Field is required\" : null}/>\n                </div>\n                : <span onDoubleClick={onDoubleClickHandler}>{title}</span>}\n        </>\n    );\n});","import style from \"./Task.module.css\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport React, {useCallback} from \"react\";\r\nimport {AppStateType} from \"../../../store/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {removeTask, updateTask} from \"../../../store/reducers/tasks/tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    todolistID: string\r\n    taskID: string\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    todolistID,\r\n                                    taskID,\r\n\r\n                                }: TaskPropsType) => {\r\n    const task = useSelector<AppStateType, TaskType>(state => {\r\n        return state.tasks[todolistID].filter(task => task.id === taskID)[0]\r\n    })\r\n    const dispatch = useDispatch()\r\n\r\n    const onUpdateTaskTitleHandler = useCallback((newTitle: string) => {\r\n        dispatch(updateTask(todolistID, taskID, {title: newTitle}))\r\n    }, [dispatch, todolistID, taskID]);\r\n\r\n    const onUpdateTaskStatus = useCallback((event) => {\r\n        const status = event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New;\r\n        dispatch(updateTask(todolistID, taskID, {status}))\r\n    }, [dispatch, todolistID, taskID])\r\n    const onClickRemovingTaskHandler = useCallback(() => {\r\n        dispatch(removeTask(todolistID, taskID))\r\n    }, [dispatch, todolistID, taskID])\r\n\r\n    return (\r\n            <li className={task.status === TaskStatuses.Completed ? style.isDone : ''}>\r\n                <Checkbox checked={task.status === TaskStatuses.Completed}\r\n                          onChange={onUpdateTaskStatus}\r\n                          style={{color:'rgba(98,194,118,0.79)'}}\r\n                          color={\"success\"}/>\r\n                <EditableSpan labelInput='Task title' updateTitle={onUpdateTaskTitleHandler} title={task.title}/>\r\n                <IconButton className={style.removeButton}\r\n                            onClick={onClickRemovingTaskHandler}\r\n                            aria-label=\"delete\" size=\"small\">\r\n                    <Delete style={{color: '#D39BC3'}}/>\r\n                </IconButton>\r\n            </li>\r\n    )\r\n})","import style from \"./TaskMap.module.css\";\nimport React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../store/store\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\nimport {TodolistType} from \"../../store/reducers/todolists/todolistReducer\";\n\ntype TasksPropsType = {\n    todolistID: string\n}\n\nexport const TasksMap = React.memo((props: TasksPropsType) => {\n\n    const tasks: Array<TaskType> = useSelector(((state: AppStateType) => state.tasks[props.todolistID]))\n    const selectTodolist = (state: AppStateType) => state.todolists.filter(td => td.id === props.todolistID)[0]\n    const todolist: TodolistType = useSelector(selectTodolist)\n\n\n    let filteredTasks = tasks;\n    if (todolist.filter === 'Active') {\n        filteredTasks = tasks.filter(task => task.status === TaskStatuses.New)\n    }\n    if (todolist.filter === 'Completed') {\n        filteredTasks = tasks.filter(task => task.status === TaskStatuses.Completed)\n    }\n\n    return (\n        <ul className={style.taskWrapper}>\n            {filteredTasks.map(task => {\n                return <Task key={task.id}\n                             taskID={task.id}\n                             todolistID={props.todolistID}/>\n            })}\n        </ul>\n    )\n});\n","import React from \"react\";\nimport style from './Todolist.module.css'\nimport {TasksMap} from \"../TasksMap/TasksMap\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {InputWithButton} from \"../InputWithButton/InputWithButton\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Close from \"@mui/icons-material/Close\";\nimport Button from '@mui/material/Button';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType, useAppSelector} from \"../../store/store\";\nimport {addTask} from \"../../store/reducers/tasks/tasksReducer\";\nimport {\n    changeFilterAC,\n    FilterValueType,\n    removeTodolist,\n    TodolistType,\n    updateTodolistTitle\n} from \"../../store/reducers/todolists/todolistReducer\";\nimport Paper from '@mui/material/Paper';\nimport {TaskType} from '../../api/todolist-api';\n\n\ntype TodolistPropsType = {\n    todolistID: string\n}\n\n\nexport const Todolist = (props: TodolistPropsType) => {\n    const selectTodolist = (state: AppStateType) => state.todolists.filter(td => td.id === props.todolistID)[0]\n    const todolist:TodolistType = useSelector(selectTodolist)\n    const tasks = useAppSelector<TaskType[]>(state=>state.tasks[props.todolistID])\n    const dispatch = useDispatch()\n\n    //functionality for removing todolists\n    const onClickRemovingTodolistHandler = () => {\n        dispatch(removeTodolist(props.todolistID))\n    };\n    //functionality for filtering tasks\n    const onClickFilterType = (filterType: FilterValueType) => {\n        dispatch(changeFilterAC(props.todolistID, filterType))\n    };\n\n    //functionality for adding tasks\n    const onClickAddTaskHandler = (newTitleTask: string) => {\n        dispatch(addTask(props.todolistID, newTitleTask));\n    }\n\n    //functionality for update todolist\n    const onUpdateTodolistTitle = (newTitle: string) => {\n        dispatch(updateTodolistTitle(props.todolistID, newTitle))\n    };\n    const isDisabled = todolist.entityStatus === 'loading'\n    return (\n        <div className={style.todolistWrapper}>\n            <Paper style={{backgroundColor: '#EBECF0', padding: '1px 20px 20px 20px'}}>\n                <div className={style.todolistHeader}>\n                    <h3>\n                        <EditableSpan labelInput='Todolist title'\n                                      title={todolist.title}\n                                      updateTitle={onUpdateTodolistTitle}/>\n                        <IconButton className={style.removeButton}\n                                    onClick={onClickRemovingTodolistHandler}\n                                    aria-label=\"delete\" size=\"small\"\n                                    disabled={isDisabled}>\n                            <Close style={{color: `${isDisabled ? '#C2C2C2' : '#172B4D'}`}}/>\n                        </IconButton>\n                    </h3>\n                </div>\n                <div className={style.inputWithButtonBlock}>\n                    <InputWithButton inputLabel={'Task title'}\n                                     buttonName={'+'}\n                                     addItem={onClickAddTaskHandler}\n                                     disabled={todolist.entityStatus === 'loading'}/>\n                </div>\n                <TasksMap todolistID={props.todolistID}/>\n                {tasks && tasks.length > 0 &&\n                <div className={style.buttonsBlock}>\n                    <ButtonGroup color={\"inherit\"} variant=\"text\" aria-label=\"text button group\">\n                        <Button onClick={() => onClickFilterType('All')}\n                                variant={todolist.filter === 'All' ? \"contained\" : \"text\"}\n                                style={{backgroundColor: `${todolist.filter === 'All' ? '#FBDC97' : ''}`}}>\n                            All\n                        </Button>\n                        <Button onClick={() => onClickFilterType('Active')}\n                                variant={todolist.filter === 'Active' ? \"contained\" : \"text\"}\n                                style={{backgroundColor: `${todolist.filter === 'Active' ? 'rgba(98,194,118,0.65)' : ''}`}}>\n                            Active\n                        </Button>\n                        <Button onClick={() => onClickFilterType('Completed')}\n                                variant={todolist.filter === 'Completed' ? \"contained\" : \"text\"}\n                                style={{backgroundColor: `${todolist.filter === 'Completed' ? 'rgba(39,182,186,0.59)' : ''}`}}>\n                            Completed\n                        </Button>\n                    </ButtonGroup>\n                </div>\n                }\n            </Paper>\n        </div>\n    );\n};\n\n","import Grid from \"@mui/material/Grid\";\r\nimport {InputWithButton} from \"../InputWithButton/InputWithButton\"\r\nimport {Todolist} from '../Todolist/Todolist';\r\nimport {createTodolist, getToDoLists, TodolistType} from '../../store/reducers/todolists/todolistReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType, useAppSelector} from '../../store/store';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {useEffect} from 'react';\r\n\r\nexport const TodolistList = () => {\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const todolists: Array<TodolistType> = useSelector((state: AppStateType) => state.todolists)\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getToDoLists())\r\n    }, [])\r\n    //functionality for adding todolists\r\n    const addTodolist = (newTodolistTitle: string) => {\r\n        dispatch(createTodolist(newTodolistTitle))\r\n    };\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{justifyContent: 'center', margin: '20px 0', marginBottom: '30px'}}>\r\n                <InputWithButton inputLabel={'Todolist title'}\r\n                                 buttonName={'x'}\r\n                                 addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={5}\r\n                  style={{justifyContent: 'center', marginBottom: '30px'}}>\r\n                {todolists.map(td => {\r\n                    return (\r\n                        <Grid key={td.id} item>\r\n                            <Todolist todolistID={td.id}/>\r\n                        </Grid>)\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import TextField from \"@mui/material/TextField\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport {useFormik} from 'formik';\r\nimport style from './Login.module.css';\r\nimport {LoginPayloadDataType} from '../../api/todolist-api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {login} from '../../store/reducers/auth/authReducer';\r\nimport {useAppSelector} from '../../store/store';\r\nimport {Navigate} from 'react-router-dom';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        } as Omit<LoginPayloadDataType, 'captcha'>,\r\n        onSubmit: (values: Omit<LoginPayloadDataType, 'captcha'>) => {\r\n            dispatch(login(values))\r\n            formik.resetForm()\r\n        },\r\n        validate: (values: Omit<LoginPayloadDataType, 'captcha'>) => {\r\n            const errors: Partial<Omit<LoginPayloadDataType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Field is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Field is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'The password field must be at least 3 characters'\r\n            }\r\n            return errors;\r\n        }\r\n    });\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return (\r\n        <Grid container justifyContent={'center'} style={{minHeight: 'calc(100vh - 75px'}}>\r\n            <Grid item>\r\n                <Paper style={{backgroundColor: '#EBECF0', padding:' 20px'}}>\r\n                    <form onSubmit={formik.handleSubmit} >\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>\r\n                                    To log in get registered\r\n                                    <a href={'https://social-network.samuraijs.com/'}\r\n                                       target={'_blank'}> here <br/>\r\n                                    </a>\r\n\r\n                                    or use common test account credentials:\r\n                                </p>\r\n                                Email: <b>free@samuraijs.com</b><br/>\r\n                                Password: <b>free</b><br/>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <div className={style.fieldWrapper}>\r\n                                    <TextField label={'Email'}\r\n                                               margin={'normal'}\r\n                                               {...formik.getFieldProps('email')}/>\r\n                                    {formik.errors.email && formik.touched.email &&\r\n                                    <div className={style.messageError}>{formik.errors.email}</div>}\r\n                                </div>\r\n                                <div className={style.fieldWrapper}>\r\n                                    <TextField label={'Password'}\r\n                                               type={'password'}\r\n                                               margin={'normal'}\r\n                                               {...formik.getFieldProps('password')}/>\r\n                                    {formik.errors.password && formik.touched.password &&\r\n                                    <div className={style.messageError}>{formik.errors.password}</div>}\r\n                                </div>\r\n                                <FormControlLabel label={'Remember me'}\r\n                                                  control={\r\n                                                      <Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                                                  style={{marginBottom: '20px'}}/>\r\n                                <Button variant={'contained'} type={'submit'}>\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <Box sx={{display: 'flex', justifyContent: 'center', height: '100vh', alignItems: 'center'}}>\r\n            <CircularProgress/>\r\n        </Box>\r\n    );\r\n}","import React, {useEffect} from 'react';\nimport './App.module.css';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport {useAppSelector} from \"./store/store\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {initializeApp, RequestStatusType} from './store/reducers/app/appReducer';\nimport {ErrorSnackbar} from './components/ErrorSnackar/ErrorSnackbar';\nimport {TodolistList} from './components/TodolistList/TodolistList';\nimport Container from '@mui/material/Container';\nimport {Navigate, Route, Routes} from 'react-router-dom';\nimport {Login} from './components/Login/Login';\nimport {useDispatch} from 'react-redux';\nimport {Preloader} from './components/Preloader/Preloader';\nimport {logout} from './store/reducers/auth/authReducer';\nimport style from './App.module.css'\n\nfunction App() {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(initializeApp())\n    }, [])\n    const status = useAppSelector<RequestStatusType>(state => state.app.status)\n    const isInitialized = useAppSelector<boolean>(state => state.app.isInitialized)\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\n    if (!isInitialized) {\n        return <Preloader/>\n    }\n    const logoutHandler = () => {\n        dispatch(logout())\n    }\n    const appBapStyle = {\n        backgroundColor: 'rgba(0,0,0,0.2)',\n        boxShadow: 'none',\n        color: 'rgba(255,255,255,0.7)',\n    }\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\" style={appBapStyle}>\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{mr: 2}}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                        News\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\n                </Toolbar>\n            </AppBar>\n            <div className={style.progressBar}>\n                {status === 'loading' && <LinearProgress/>}\n            </div>\n            <Container fixed>\n                <Routes>\n                    <Route path={'/'} element={<TodolistList/>}/>\n                    <Route path={'login'} element={<Login/>}/>\n                    <Route path={'404'} element={<h1>404 page not found</h1>}/>\n                    <Route path={'*'} element={<Navigate to={'404'}/>}/>\n                </Routes>\n            </Container>\n            <ErrorSnackbar/>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistWrapper\":\"Todolist_todolistWrapper__2Fdg4\",\"buttonsBlock\":\"Todolist_buttonsBlock__2sEFe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldWrapper\":\"Login_fieldWrapper__2a4qF\",\"messageError\":\"Login_messageError__wAyJF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressBar\":\"App_progressBar__2DEcg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"Task_isDone__ciiS-\"};"],"sourceRoot":""}