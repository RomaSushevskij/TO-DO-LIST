{"version":3,"sources":["components/InputWithButton/InputWithButton.module.css","components/TasksMap/TaskMap.module.css","api/todolist-api.ts","utils/error_utils.ts","store/reducers/tasks/tasksReducer.ts","store/reducers/todolists/todolistReducer.ts","store/reducers/auth/authReducer.ts","store/reducers/app/appReducer.ts","store/selectors/app-selectors.ts","hooks.ts","components/ErrorSnackar/ErrorSnackbar.tsx","components/InputWithButton/InputWithButton.tsx","components/EditableSpan/EditableSpan.tsx","store/selectors/tasks-selectors.ts","components/TasksMap/Task/Task.tsx","store/selectors/todolists-selectors.ts","components/TasksMap/TasksMap.tsx","components/Todolist/Todolist.tsx","store/selectors/auth-selectors.ts","components/TodolistList/TodolistList.tsx","components/Login/Login.tsx","components/Preloader/Preloader.tsx","App.tsx","store/store.ts","index.tsx","components/Todolist/Todolist.module.css","components/Login/Login.module.css","App.module.css","components/TasksMap/Task/Task.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","RESULT_CODES","todoInstance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","then","response","data","title","post","todolistId","delete","put","taskId","model","authAPI","handleNetworkAppError","dispatch","error","errorMessage","message","setAppErrorMessage","handleServerAppError","messages","length","getTasks","createAsyncThunk","thunkAPI","a","setAppStatus","status","tasks","items","rejectWithValue","createTask","params","resultCode","success","task","item","removeTask","updateTask","getState","state","currentTask","find","id","modelStatus","deadline","description","priority","startDate","tasksReducer","createSlice","name","initialState","reducers","extraReducers","builder","addCase","createTodolist","fulfilled","action","payload","todolist","removeTodolist","todolistID","getToDoLists","todolists","forEach","tl","resetTodolistsData","todoListId","unshift","taskIndex","findIndex","splice","reducer","_","changeToDoListsEntityStatus","entityStatus","updateTodolistTitle","newTitle","slice","changeFilter","todoIndex","td","filter","filterType","map","todolistsReducer","actions","login","setIsLoggedIn","isLoggedIn","errors","fieldsErrors","undefined","logout","authReducer","initializeApp","isInitialized","rejected","appReducer","getStatus","app","getIsInitialized","getAppErrorMessage","useAppDispatch","useDispatch","useAppSelector","useSelector","Alert","React","props","ref","elevation","variant","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","InputWithButton","memo","addItem","inputLabel","disabled","useState","inputTitleValue","setInputTitleValue","setError","onInputChange","useCallback","currentTarget","value","onButtonClick","trim","onFieldKeyPress","key","TextField","onChange","onKeyPress","helperText","size","label","style","borderColor","className","textField","Fab","marginLeft","backgroundColor","color","onClick","EditableSpan","updateTitle","labelInput","editMode","setEditMode","spanTitle","setSpanTitle","onFieldBlur","onFieldChange","e","autoFocus","onBlur","onDoubleClick","getTasksForCurrentTodolist","Task","taskID","getCurrentTask","onTaskTitleUpdate","onTaskStatusUpdate","checked","Completed","New","onRemoveTaskClick","isDone","Checkbox","IconButton","removeButton","getTodolists","getCurrentTodolist","TasksMap","currentTodolist","tasksForCurrentTodolist","filteredTasks","taskWrapper","Todolist","isDisabled","onClickFilterType","todolistWrapper","Paper","padding","todolistHeader","inputWithButtonBlock","buttonName","newTitleTask","buttonsBlock","ButtonGroup","Button","getIsLoggedIn","auth","TodolistList","useEffect","Grid","container","justifyContent","margin","marginBottom","newTodolistTitle","spacing","to","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","formikHelpers","resultAction","match","err","field","setFieldError","resetForm","validate","minHeight","handleSubmit","FormControl","FormLabel","href","target","FormGroup","fieldWrapper","getFieldProps","touched","messageError","type","FormControlLabel","control","Preloader","Box","display","height","alignItems","CircularProgress","appBapStyle","boxShadow","App","AppBar","position","Toolbar","edge","mr","Typography","component","flexGrow","progressBar","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff2c7eb9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textField\":\"InputWithButton_textField__3ozey\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskWrapper\":\"TaskMap_taskWrapper__1qCan\"};","import axios, {AxiosResponse} from \"axios\";\r\n\r\nexport type TodolistResponseType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type FieldErrorType = { error: string, field: string };\r\nexport type ResponseType<T = {}> = {\r\n    data: T\r\n    fieldsErrors: FieldErrorType[]\r\n    messages: string[]\r\n    resultCode: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    items: TaskType []\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport enum RESULT_CODES {\r\n    success = 0,\r\n    error = 1,\r\n    captchaIsRequired = 10\r\n}\r\n\r\nexport type LoginPayloadDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\nexport type MeDataResponseType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nconst todoInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"10732160-f45a-4879-8e6f-b2819bc13c24\"\r\n    }\r\n});\r\n\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return todoInstance.get<TodolistResponseType[]>('todo-lists')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    createTodolist(title: string) {\r\n        return todoInstance.post<any, AxiosResponse<ResponseType<{ item: TodolistResponseType }>>, { title: string }>('todo-lists', {title})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return todoInstance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return todoInstance.put<any, AxiosResponse<ResponseType>, { title: string }>(`todo-lists/${todolistId}`, {title})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return todoInstance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return todoInstance.post<any, AxiosResponse<ResponseType<{ item: TaskType }>>, { title: string }>(`todo-lists/${todolistId}/tasks`, {title})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    removeTask(todolistId: string, taskId: string) {\r\n        return todoInstance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return todoInstance.put<any, AxiosResponse<ResponseType<TaskType>>, UpdateTaskModelType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n};\r\nexport const authAPI = {\r\n    login(data: LoginPayloadDataType) {\r\n        return todoInstance.post<ResponseType, AxiosResponse<ResponseType<{ userId: number }>>, LoginPayloadDataType>('auth/login', data)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    me() {\r\n        return todoInstance.get<ResponseType<MeDataResponseType>>('auth/me')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logout() {\r\n        return todoInstance.delete<ResponseType>('auth/login')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}","import {setAppErrorMessage} from '../store/reducers/app/appReducer';\r\nimport {ResponseType} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handleNetworkAppError = (dispatch: Dispatch, error: { message: string }) => {\r\n    const errorMessage = error.message ? error.message : 'Some error';\r\n    dispatch(setAppErrorMessage({errorMessage}))\r\n};\r\nexport const handleServerAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\r\n    const errorMessage = data.messages.length ? data.messages[0] : 'Some error occurred';\r\n    dispatch(setAppErrorMessage({errorMessage}))\r\n};\r\n","import {createTodolist, getToDoLists, removeTodolist, resetTodolistsData} from \"../todolists/todolistReducer\";\r\nimport {RESULT_CODES, TaskType, todolistAPI, UpdateTaskModelType} from \"../../../api/todolist-api\";\r\nimport {AppStateType} from '../../store';\r\nimport {setAppStatus} from '../app/appReducer';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateTaskDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n// T H U N K S\r\nexport const getTasks = createAsyncThunk('tasks/getTasks', async (todolistId: string, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.getTasks(todolistId);\r\n        return {tasks: data.items, todolistId}\r\n    } catch (err) {\r\n        const error = err as AxiosError;\r\n        handleNetworkAppError(thunkAPI.dispatch, error);\r\n        return thunkAPI.rejectWithValue(null)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const createTask = createAsyncThunk('tasks/createTask', async (params: { todolistId: string, title: string }, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.createTask(params.todolistId, params.title)\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {task: data.data.item}\r\n        } else {\r\n            handleServerAppError(dispatch, data)\r\n            return rejectWithValue(null)\r\n        }\r\n\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const removeTask = createAsyncThunk('tasks/removeTask', async (params: { todolistId: string, taskId: string }, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.removeTask(params.todolistId, params.taskId);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {todolistId: params.todolistId, taskId: params.taskId}\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (params: { todolistId: string, taskId: string, model: UpdateTaskDomainModelType }, {dispatch, rejectWithValue, getState}) => {\r\n        const state = getState() as AppStateType;\r\n        try {\r\n            const currentTask = state.tasks[params.todolistId].find(task => task.id === params.taskId);\r\n            if (currentTask) {\r\n                const modelStatus: UpdateTaskModelType = {\r\n                    deadline: currentTask.deadline,\r\n                    description: currentTask.description,\r\n                    priority: currentTask.priority,\r\n                    startDate: currentTask.startDate,\r\n                    status: currentTask.status,\r\n                    title: currentTask.title,\r\n                    ...params.model\r\n                };\r\n                dispatch(setAppStatus({status: 'loading'}))\r\n                const data = await todolistAPI.updateTask(params.todolistId, params.taskId, modelStatus);\r\n                if (data.resultCode === RESULT_CODES.success) {\r\n                    return {todolistId: params.todolistId, taskId: params.taskId, model: params.model}\r\n                } else {\r\n                    handleServerAppError(dispatch, data);\r\n                    return rejectWithValue(null)\r\n                }\r\n            }\r\n        } catch (e) {\r\n            const error = e as AxiosError;\r\n            handleNetworkAppError(dispatch, error)\r\n            return rejectWithValue(null);\r\n        } finally {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        }\r\n    })\r\n;\r\n\r\nconst initialState: TasksType = {};\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers(builder) {\r\n        builder.addCase(createTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                delete state[action.payload.todolistID];\r\n            })\r\n            .addCase(getToDoLists.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n            })\r\n            .addCase(resetTodolistsData, () => {\r\n                return {}\r\n            })\r\n            .addCase(getTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(createTask.fulfilled, (state, action) => {\r\n                state[action.payload.task.todoListId].unshift(action.payload.task);\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId];\r\n                const taskIndex = tasks.findIndex(task => task.id === action.payload.taskId);\r\n                if (taskIndex > -1) {\r\n                    tasks.splice(taskIndex, 1);\r\n                }\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    const tasks = state[action.payload.todolistId];\r\n                    const taskIndex = tasks.findIndex(task => {\r\n                        if (action.payload) {\r\n                            return task.id === action.payload.taskId\r\n                        }\r\n                    });\r\n                    if (taskIndex > -1) {\r\n                        tasks[taskIndex] = {...tasks[taskIndex], ...action.payload.model};\r\n                    }\r\n                }\r\n\r\n            })\r\n    }\r\n});\r\nexport const tasksReducer = slice.reducer;\r\n","import {RESULT_CODES, todolistAPI, TodolistResponseType} from \"../../../api/todolist-api\";\r\nimport {RequestStatusType, setAppStatus} from '../app/appReducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {getTasks} from '../tasks/tasksReducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type FilterValueType = 'All' | 'Active' | 'Completed'\r\nexport type TodolistType = TodolistResponseType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType,\r\n}\r\n\r\n// T H U N K S\r\n\r\nexport const getToDoLists = createAsyncThunk('todolists/getToDoLists', async (_, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.getTodolists();\r\n        data.forEach((todolist => {\r\n            dispatch(getTasks(todolist.id))\r\n        }));\r\n        return {todolists: data}\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\n\r\nexport const createTodolist = createAsyncThunk('todolists/createTodolist', async (title: string, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.createTodolist(title);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {todolist: data.data.item}\r\n        } else {\r\n            handleServerAppError(dispatch, data)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error)\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const removeTodolist = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        dispatch(changeToDoListsEntityStatus({todolistId: todolistId, entityStatus: 'loading'}));\r\n        const data = await todolistAPI.deleteTodolist(todolistId);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {todolistID: todolistId}\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}));\r\n        dispatch(changeToDoListsEntityStatus({todolistId: todolistId, entityStatus: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const updateTodolistTitle = createAsyncThunk('todolists/updateTodolistTitle', async (params: { todolistId: string, title: string }, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.updateTodolist(params.todolistId, params.title);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {todolistID: params.todolistId, newTitle: params.title}\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nconst initialState: TodolistType[] = [];\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        changeFilter(state, action: PayloadAction<{ todolistID: string, filterType: FilterValueType }>) {\r\n            const todoIndex = state.findIndex(td => td.id === action.payload.todolistID);\r\n            if (todoIndex > -1) {\r\n                state[todoIndex].filter = action.payload.filterType;\r\n            }\r\n        },\r\n        changeToDoListsEntityStatus(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n            const todoIndex = state.findIndex(td => td.id === action.payload.todolistId);\r\n            if (todoIndex > -1) {\r\n                state[todoIndex].entityStatus = action.payload.entityStatus;\r\n            }\r\n        },\r\n        resetTodolistsData() {\r\n            return [];\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(getToDoLists.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(td => ({...td, filter: 'All', entityStatus: 'idle'}));\r\n        })\r\n            .addCase(createTodolist.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: \"All\", entityStatus: 'idle'});\r\n            })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const todoIndex = state.findIndex(td => td.id === action.payload.todolistID);\r\n                if (todoIndex > -1) {\r\n                    state.splice(todoIndex, 1);\r\n                }\r\n            })\r\n            .addCase(updateTodolistTitle.fulfilled, (state, action) => {\r\n                const todoIndex = state.findIndex(td => td.id === action.payload.todolistID);\r\n                if (todoIndex > -1) {\r\n                    state[todoIndex].title = action.payload.newTitle;\r\n                }\r\n            });\r\n    }\r\n\r\n});\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    changeFilter,\r\n    changeToDoListsEntityStatus,\r\n    resetTodolistsData\r\n} = slice.actions;\r\n\r\n\r\n","import {setAppStatus} from '../app/appReducer';\r\nimport {authAPI, FieldErrorType, LoginPayloadDataType, RESULT_CODES} from '../../../api/todolist-api';\r\nimport {AxiosError} from 'axios';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {resetTodolistsData} from '../todolists/todolistReducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type AuthInitialStateType = typeof initialState;\r\n\r\n// T H U N K S\r\nexport const login = createAsyncThunk<undefined, Omit<LoginPayloadDataType, 'captcha'>, { rejectValue: { errors: string[], fieldsErrors?: FieldErrorType[] } }>('auth/login', async (params, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await authAPI.login(params);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (_, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'idle'}));\r\n        const data = await authAPI.logout();\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            dispatch(resetTodolistsData())\r\n        } else {\r\n            handleServerAppError(dispatch, data)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\nconst initialState = {\r\n    isLoggedIn: false\r\n};\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true;\r\n        })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false;\r\n            })\r\n    }\r\n});\r\nexport const {setIsLoggedIn} = slice.actions;\r\nexport const authReducer = slice.reducer;\r\n\r\n\r\n\r\n","import {NullableType} from '../../store';\r\nimport {authAPI, RESULT_CODES} from '../../../api/todolist-api';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {AxiosError} from 'axios';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {setIsLoggedIn} from '../auth/authReducer';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type InitialAppStateType = typeof initialAppState;\r\n\r\n// T H U N K S\r\nexport const initializeApp = createAsyncThunk('app/initializeApp', async (_, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        const data = await authAPI.me();\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}));\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n\r\n    }\r\n});\r\n\r\nconst initialAppState = {\r\n    status: 'idle' as RequestStatusType,\r\n    errorMessage: null as NullableType<string>,\r\n    isInitialized: false\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialAppState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status;\r\n        },\r\n        setAppErrorMessage(state, action: PayloadAction<{ errorMessage: NullableType<string> }>) {\r\n            state.errorMessage = action.payload.errorMessage;\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, state => {\r\n            state.isInitialized = true;\r\n        });\r\n        builder.addCase(initializeApp.rejected, state => {\r\n            state.isInitialized = true;\r\n        });\r\n    }\r\n});\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppStatus, setAppErrorMessage} = slice.actions;\r\n\r\n\r\n","import {AppStateType} from '../store';\r\n\r\nexport const getStatus = (state: AppStateType) => state.app.status;\r\nexport const getIsInitialized = (state: AppStateType) => state.app.isInitialized;\r\nexport const getAppErrorMessage = (state: AppStateType) => state.app.errorMessage;\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {AppDispatch, AppStateType} from './store/store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector;","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {setAppErrorMessage} from '../../store/reducers/app/appReducer';\r\nimport {getAppErrorMessage} from '../../store/selectors/app-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../hooks';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const errorMessage = useAppSelector(getAppErrorMessage);\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorMessage({errorMessage: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={errorMessage !== null} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {errorMessage}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport Fab from \"@mui/material/Fab\";\nimport TextField from \"@mui/material/TextField\";\nimport Add from \"@mui/icons-material/Add\";\nimport style from './InputWithButton.module.css'\n\n\nexport type InputWithButtonPropsType = {\n    buttonName: string\n    addItem: (inputTitleValue: string) => void\n    inputLabel: string\n    disabled?: boolean\n}\n\nexport const InputWithButton = React.memo(({\n                                               addItem,\n                                               inputLabel,\n                                               disabled,\n                                           }: InputWithButtonPropsType) => {\n\n    //local state for input\n    const [inputTitleValue, setInputTitleValue] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    const onInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        setInputTitleValue(event.currentTarget.value);\n        if (error) {\n            setError(false);\n        }\n\n    }, [error]);\n\n    //functionality for button\n    const onButtonClick = useCallback(() => {\n        if (inputTitleValue.trim()) {\n            addItem(inputTitleValue.trim());\n            setInputTitleValue('')\n        } else {\n            setError(true)\n        }\n    }, [addItem, inputTitleValue]);\n\n    const onFieldKeyPress = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            onButtonClick();\n        }\n    }, [onButtonClick]);\n\n    return (\n        <div>\n            <TextField error={error}\n                       onChange={onInputChange}\n                       value={inputTitleValue}\n                       onKeyPress={onFieldKeyPress}\n                       helperText={error ? 'Field is required' : null}\n                       size={\"small\"} id=\"outlined-basic\"\n                       label={inputLabel}\n                       variant=\"outlined\"\n                       disabled={disabled}\n                       style={{borderColor: '#6D88B8'}}\n                       className={style.textField}/>\n            <Fab style={{marginLeft: \"15px\", backgroundColor: '#6D88B8', color: '#ffffff'}}\n                 onClick={onButtonClick}\n                 aria-label=\"add\" size={\"small\"}\n                 disabled={disabled}>\n                <Add/>\n            </Fab>\n        </div>\n    );\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport TextField from \"@mui/material/TextField\";\n\ntype EditableSpanPropsType = {\n    title: string\n    updateTitle: (newTitle: string) => void\n    labelInput: string\n}\n\nexport const EditableSpan = React.memo(({\n                                            title,\n                                            updateTitle,\n                                            labelInput,\n                                        }: EditableSpanPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [spanTitle, setSpanTitle] = useState(title);\n    const [error, setError] = useState<boolean>(false);\n\n    const onFieldDoubleClick = () => {\n        setEditMode(true);\n    };\n\n    const onFieldBlur = useCallback(() => {\n        if (spanTitle.trim()) {\n            setEditMode(false);\n            updateTitle(spanTitle)\n        } else {\n            setError(true)\n        }\n    }, [updateTitle, spanTitle]);\n\n    const onFieldKeyPress = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            onFieldBlur()\n        }\n    }, [onFieldBlur]);\n\n    const onFieldChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setSpanTitle(e.currentTarget.value);\n        if (error) {\n            setError(false);\n        }\n\n    }, [error]);\n\n    return (\n        <>\n            {editMode ?\n                <div>\n                    <TextField onKeyPress={onFieldKeyPress}\n                               autoFocus\n                               onBlur={onFieldBlur} value={spanTitle}\n                               onChange={onFieldChange} id=\"standard-basic\"\n                               label={labelInput}\n                               variant=\"standard\"\n                               size={\"small\"}\n                               error={error}\n                               helperText={error ? \"Field is required\" : null}/>\n                </div>\n                : <span onDoubleClick={onFieldDoubleClick}>{title}</span>}\n        </>\n    );\n});","import {AppStateType} from '../store';\r\n\r\nexport const getTasksForCurrentTodolist = (state: AppStateType, todolistID: string) => state.tasks[todolistID];\r\nexport const getCurrentTask = (state: AppStateType, todolistID:string, taskID:string) => state.tasks[todolistID].filter(({id}) => id === taskID)[0];\r\n","import style from \"./Task.module.css\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport React, {useCallback} from \"react\";\r\nimport {removeTask, updateTask} from \"../../../store/reducers/tasks/tasksReducer\";\r\nimport {TaskStatuses} from \"../../../api/todolist-api\";\r\nimport {getCurrentTask} from '../../../store/selectors/tasks-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../../hooks';\r\n\r\ntype TaskPropsType = {\r\n    todolistID: string\r\n    taskID: string\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    todolistID,\r\n                                    taskID,\r\n                                }: TaskPropsType) => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const currentTask = useAppSelector(state => getCurrentTask(state, todolistID, taskID));\r\n\r\n    const onTaskTitleUpdate = useCallback((title: string) => {\r\n        dispatch(updateTask({todolistId: todolistID, taskId: taskID, model: {title}}))\r\n    }, [dispatch, todolistID, taskID]);\r\n\r\n    const onTaskStatusUpdate = useCallback((event) => {\r\n        const status = event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New;\r\n        dispatch(updateTask({todolistId: todolistID, taskId: taskID, model: {status}}))\r\n    }, [dispatch, todolistID, taskID]);\r\n\r\n    const onRemoveTaskClick = useCallback(() => {\r\n        dispatch(removeTask({todolistId: todolistID, taskId: taskID}))\r\n    }, [dispatch, todolistID, taskID]);\r\n\r\n    return (\r\n        <li className={currentTask.status === TaskStatuses.Completed ? style.isDone : ''}>\r\n            <Checkbox checked={currentTask.status === TaskStatuses.Completed}\r\n                      onChange={onTaskStatusUpdate}\r\n                      style={{color: 'rgba(98,194,118,0.79)'}}\r\n                      color={\"success\"}/>\r\n            <EditableSpan labelInput='Task title' updateTitle={onTaskTitleUpdate} title={currentTask.title}/>\r\n            <IconButton className={style.removeButton}\r\n                        onClick={onRemoveTaskClick}\r\n                        aria-label=\"delete\" size=\"small\">\r\n                <Delete style={{color: '#D39BC3'}}/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n});","import {AppStateType} from '../store';\r\n\r\nexport const getTodolists = (state: AppStateType) => state.todolists;\r\nexport const getCurrentTodolist = (state: AppStateType, todolistID:string) => state.todolists.filter(({id}) => id === todolistID)[0];","import style from \"./TaskMap.module.css\";\nimport React from \"react\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses} from \"../../api/todolist-api\";\nimport {getTasksForCurrentTodolist} from '../../store/selectors/tasks-selectors';\nimport {getCurrentTodolist} from '../../store/selectors/todolists-selectors';\nimport {useAppSelector} from '../../hooks';\n\ntype TasksPropsType = {\n    todolistID: string\n}\n\nexport const TasksMap = React.memo(({todolistID}: TasksPropsType) => {\n\n    const currentTodolist = useAppSelector(state => getCurrentTodolist(state, todolistID));\n    const tasksForCurrentTodolist = useAppSelector(state => getTasksForCurrentTodolist(state, todolistID));\n\n    let filteredTasks = tasksForCurrentTodolist;\n    if (currentTodolist.filter === 'Active') {\n        filteredTasks = tasksForCurrentTodolist.filter(task => task.status === TaskStatuses.New)\n    }\n    if (currentTodolist.filter === 'Completed') {\n        filteredTasks = tasksForCurrentTodolist.filter(task => task.status === TaskStatuses.Completed)\n    }\n\n    return (\n        <ul className={style.taskWrapper}>\n            {filteredTasks.map(({id}) => {\n                return <Task key={id}\n                             taskID={id}\n                             todolistID={todolistID}/>\n            })}\n        </ul>\n    )\n});\n","import React from \"react\";\r\nimport style from './Todolist.module.css'\r\nimport {TasksMap} from \"../TasksMap/TasksMap\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {InputWithButton} from \"../InputWithButton/InputWithButton\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Close from \"@mui/icons-material/Close\";\r\nimport Button from '@mui/material/Button';\r\nimport {createTask} from \"../../store/reducers/tasks/tasksReducer\";\r\nimport {\r\n    changeFilter,\r\n    FilterValueType,\r\n    removeTodolist,\r\n    TodolistType,\r\n    updateTodolistTitle\r\n} from \"../../store/reducers/todolists/todolistReducer\";\r\nimport Paper from '@mui/material/Paper';\r\nimport {getTasksForCurrentTodolist} from '../../store/selectors/tasks-selectors';\r\nimport {getCurrentTodolist} from '../../store/selectors/todolists-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../hooks';\r\n\r\nexport type TodolistPropsType = {\r\n    todolistID: string\r\n}\r\n\r\nexport const Todolist = ({todolistID}: TodolistPropsType) => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const todolist: TodolistType = useAppSelector((state) => getCurrentTodolist(state, todolistID));\r\n    const tasks = useAppSelector(state => getTasksForCurrentTodolist(state, todolistID));\r\n    const isDisabled = todolist.entityStatus === 'loading';\r\n\r\n    //functionality for removing todolists\r\n    const onClickRemovingTodolistHandler = () => {\r\n        dispatch(removeTodolist(todolistID))\r\n    };\r\n\r\n    //functionality for filtering tasks\r\n    const onClickFilterType = (filterType: FilterValueType) => {\r\n        dispatch(changeFilter({todolistID: todolistID, filterType}))\r\n    };\r\n\r\n    //functionality for adding tasks\r\n    const onClickAddTaskHandler = (newTitleTask: string) => {\r\n        dispatch(createTask({todolistId: todolistID, title: newTitleTask}));\r\n    };\r\n\r\n    //functionality for update todolist\r\n    const onUpdateTodolistTitle = (newTitle: string) => {\r\n        dispatch(updateTodolistTitle({todolistId: todolistID, title: newTitle}))\r\n    };\r\n\r\n    return (\r\n        <div className={style.todolistWrapper}>\r\n            <Paper style={{backgroundColor: '#EBECF0', padding: '1px 20px 20px 20px'}}>\r\n                <div className={style.todolistHeader}>\r\n                    <h3>\r\n                        <EditableSpan labelInput='Todolist title'\r\n                                      title={todolist.title}\r\n                                      updateTitle={onUpdateTodolistTitle}/>\r\n                        <IconButton className={style.removeButton}\r\n                                    onClick={onClickRemovingTodolistHandler}\r\n                                    aria-label=\"delete\" size=\"small\"\r\n                                    disabled={isDisabled}>\r\n                            <Close style={{color: `${isDisabled ? '#C2C2C2' : '#172B4D'}`}}/>\r\n                        </IconButton>\r\n                    </h3>\r\n                </div>\r\n                <div className={style.inputWithButtonBlock}>\r\n                    <InputWithButton inputLabel={'Task title'}\r\n                                     buttonName={'+'}\r\n                                     addItem={onClickAddTaskHandler}\r\n                                     disabled={todolist.entityStatus === 'loading'}/>\r\n                </div>\r\n                <TasksMap todolistID={todolistID}/>\r\n                {tasks && tasks.length > 0 &&\r\n                <div className={style.buttonsBlock}>\r\n                    <ButtonGroup color={\"inherit\"} variant=\"text\" aria-label=\"text button group\">\r\n                        <Button onClick={() => onClickFilterType('All')}\r\n                                variant={todolist.filter === 'All' ? \"contained\" : \"text\"}\r\n                                style={{backgroundColor: `${todolist.filter === 'All' ? '#FBDC97' : ''}`}}>\r\n                            All\r\n                        </Button>\r\n                        <Button onClick={() => onClickFilterType('Active')}\r\n                                variant={todolist.filter === 'Active' ? \"contained\" : \"text\"}\r\n                                style={{backgroundColor: `${todolist.filter === 'Active' ? 'rgba(98,194,118,0.65)' : ''}`}}>\r\n                            Active\r\n                        </Button>\r\n                        <Button onClick={() => onClickFilterType('Completed')}\r\n                                variant={todolist.filter === 'Completed' ? \"contained\" : \"text\"}\r\n                                style={{backgroundColor: `${todolist.filter === 'Completed' ? 'rgba(39,182,186,0.59)' : ''}`}}>\r\n                            Completed\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n                }\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {AppStateType} from '../store';\r\n\r\nexport const getIsLoggedIn = (state: AppStateType) => state.auth.isLoggedIn;","import Grid from \"@mui/material/Grid\";\r\nimport {InputWithButton} from \"../InputWithButton/InputWithButton\"\r\nimport {Todolist} from '../Todolist/Todolist';\r\nimport {createTodolist, getToDoLists} from '../../store/reducers/todolists/todolistReducer';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {useEffect} from 'react';\r\nimport {getIsLoggedIn} from '../../store/selectors/auth-selectors';\r\nimport {getTodolists} from '../../store/selectors/todolists-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../hooks';\r\n\r\nexport const TodolistList = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const isLoggedIn = useAppSelector(getIsLoggedIn);\r\n    const todolists = useAppSelector(getTodolists);\r\n\r\n    //functionality for adding todolists\r\n    const addTodolist = (newTodolistTitle: string) => {\r\n        dispatch(createTodolist(newTodolistTitle))\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getToDoLists())\r\n    }, []);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{justifyContent: 'center', margin: '20px 0', marginBottom: '30px'}}>\r\n                <InputWithButton inputLabel={'Todolist title'}\r\n                                 buttonName={'x'}\r\n                                 addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={5}\r\n                  style={{justifyContent: 'center', marginBottom: '30px'}}>\r\n                {todolists.map(({id}) => {\r\n                    return (\r\n                        <Grid key={id} item>\r\n                            <Todolist todolistID={id}/>\r\n                        </Grid>)\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n};","import TextField from \"@mui/material/TextField\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport {useFormik} from 'formik';\r\nimport style from './Login.module.css';\r\nimport {LoginPayloadDataType} from '../../api/todolist-api';\r\nimport {login} from '../../store/reducers/auth/authReducer';\r\nimport {Navigate} from 'react-router-dom';\r\nimport Paper from '@mui/material/Paper';\r\nimport {getIsLoggedIn} from '../../store/selectors/auth-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../hooks';\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const isLoggedIn = useAppSelector(getIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        } as Omit<LoginPayloadDataType, 'captcha'>,\r\n        onSubmit: async (values: Omit<LoginPayloadDataType, 'captcha'>, formikHelpers) => {\r\n            const resultAction = await dispatch(login(values));\r\n            if (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    resultAction.payload.fieldsErrors.forEach((err) => {\r\n                        const {field, error} = err;\r\n                        formikHelpers.setFieldError(field, error)\r\n                    })\r\n                }\r\n            } else {\r\n                formik.resetForm()\r\n            }\r\n        },\r\n        validate: (values: Omit<LoginPayloadDataType, 'captcha'>) => {\r\n            const errors: Partial<Omit<LoginPayloadDataType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Field is required';\r\n            } else if (!values.password) {\r\n                errors.password = 'Field is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'The password field must be at least 3 characters'\r\n            }\r\n            return errors;\r\n        }\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'} style={{minHeight: 'calc(100vh - 75px'}}>\r\n            <Grid item>\r\n                <Paper style={{backgroundColor: '#EBECF0', padding: ' 20px'}}>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>\r\n                                    To log in get registered\r\n                                    <a href={'https://social-network.samuraijs.com/'}\r\n                                       target={'_blank'}> here <br/>\r\n                                    </a>\r\n\r\n                                    or use common test account credentials:\r\n                                </p>\r\n                                Email: <b>free@samuraijs.com</b><br/>\r\n                                Password: <b>free</b><br/>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <div className={style.fieldWrapper}>\r\n                                    <TextField label={'Email'}\r\n                                               margin={'normal'}\r\n                                               {...formik.getFieldProps('email')}/>\r\n                                    {formik.errors.email && formik.touched.email &&\r\n                                    <div className={style.messageError}>{formik.errors.email}</div>}\r\n                                </div>\r\n                                <div className={style.fieldWrapper}>\r\n                                    <TextField label={'Password'}\r\n                                               type={'password'}\r\n                                               margin={'normal'}\r\n                                               {...formik.getFieldProps('password')}/>\r\n                                    {formik.errors.password && formik.touched.password &&\r\n                                    <div className={style.messageError}>{formik.errors.password}</div>}\r\n                                </div>\r\n                                <FormControlLabel label={'Remember me'}\r\n                                                  control={\r\n                                                      <Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                                                  style={{marginBottom: '20px'}}/>\r\n                                <Button variant={'contained'} type={'submit'}>\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n};\r\n","import CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <Box sx={{display: 'flex', justifyContent: 'center', height: '100vh', alignItems: 'center'}}>\r\n            <CircularProgress/>\r\n        </Box>\r\n    );\r\n};","import React, {useEffect} from 'react';\r\nimport './App.module.css';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {initializeApp} from './store/reducers/app/appReducer';\r\nimport {ErrorSnackbar} from './components/ErrorSnackar/ErrorSnackbar';\r\nimport {TodolistList} from './components/TodolistList/TodolistList';\r\nimport Container from '@mui/material/Container';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from './components/Login/Login';\r\nimport {Preloader} from './components/Preloader/Preloader';\r\nimport {logout} from './store/reducers/auth/authReducer';\r\nimport style from './App.module.css'\r\nimport {getIsInitialized, getStatus} from './store/selectors/app-selectors';\r\nimport {getIsLoggedIn} from './store/selectors/auth-selectors';\r\nimport {useAppDispatch, useAppSelector} from './hooks';\r\n\r\nconst appBapStyle = {\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n    boxShadow: 'none',\r\n    color: 'rgba(255,255,255,0.7)',\r\n};\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const status = useAppSelector(getStatus);\r\n    const isInitialized = useAppSelector(getIsInitialized);\r\n    const isLoggedIn = useAppSelector(getIsLoggedIn);\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logout())\r\n    };\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\" style={appBapStyle}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={style.progressBar}>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </div>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistList/>}/>\r\n                    <Route path={'login'} element={<Login/>}/>\r\n                    <Route path={'404'} element={<h1>404 page not found</h1>}/>\r\n                    <Route path={'*'} element={<Navigate to={'404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import {tasksReducer} from \"./reducers/tasks/tasksReducer\";\r\nimport {todolistsReducer} from \"./reducers/todolists/todolistReducer\";\r\nimport {combineReducers} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {appReducer} from './reducers/app/appReducer';\r\nimport {authReducer} from './reducers/auth/authReducer';\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n});\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type NullableType<T> = null | T;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistWrapper\":\"Todolist_todolistWrapper__2Fdg4\",\"buttonsBlock\":\"Todolist_buttonsBlock__2sEFe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldWrapper\":\"Login_fieldWrapper__2a4qF\",\"messageError\":\"Login_messageError__wAyJF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressBar\":\"App_progressBar__2DEcg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"Task_isDone__ciiS-\"};"],"sourceRoot":""}