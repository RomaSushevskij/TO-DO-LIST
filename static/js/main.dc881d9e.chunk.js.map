{"version":3,"sources":["components/InputWithButton/InputWithButton.module.css","components/TasksMap/TaskMap.module.css","api/todolist-api.ts","utils/error_utils.ts","store/reducers/tasks/tasksReducer.ts","store/reducers/todolists/todolistReducer.ts","store/reducers/auth/authReducer.ts","store/reducers/app/appReducer.ts","store/selectors/app-selectors.ts","hooks.ts","components/ErrorSnackar/ErrorSnackbar.tsx","components/InputWithButton/InputWithButton.tsx","components/EditableSpan/EditableSpan.tsx","store/selectors/tasks-selectors.ts","components/TasksMap/Task/Task.tsx","store/selectors/todolists-selectors.ts","components/TasksMap/TasksMap.tsx","components/Todolist/Todolist.tsx","store/selectors/auth-selectors.ts","components/TodolistList/TodolistList.tsx","components/Login/Login.tsx","components/Preloader/Preloader.tsx","App.tsx","store/store.ts","index.tsx","components/Todolist/Todolist.module.css","components/TasksMap/Task/Task.module.css","components/Login/Login.module.css","App.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","RESULT_CODES","todoInstance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","then","response","data","title","post","todolistId","delete","put","taskId","model","replaceableId","putAfterItemId","authAPI","handleNetworkAppError","dispatch","error","errorMessage","message","setAppErrorMessage","handleServerAppError","messages","length","getTasks","createAsyncThunk","thunkAPI","a","setAppStatus","status","tasks","items","rejectWithValue","createTask","params","resultCode","success","task","item","removeTask","updateTask","getState","state","currentTask","tasksData","find","id","modelStatus","deadline","description","priority","startDate","reorderTask","undefined","replaceableTaskIndex","draggableTaskIndex","replaceableTaskId","draggableTaskId","tasksReducer","createSlice","name","initialState","replacementTask","reducers","extraReducers","builder","addCase","createTodolist","fulfilled","action","payload","todolist","removeTodolist","todolistID","getToDoLists","todolists","forEach","tl","resetTodolistsData","todoListId","unshift","taskIndex","findIndex","splice","currentTasks","reorderedTask","reducer","_","changeToDoListsEntityStatus","entityStatus","updateTodolistTitle","newTitle","slice","changeFilter","todoIndex","td","filter","filterType","map","todolistsReducer","actions","login","setIsLoggedIn","isLoggedIn","errors","fieldsErrors","logout","authReducer","initializeApp","isInitialized","rejected","appReducer","getStatus","app","getIsInitialized","getAppErrorMessage","useAppDispatch","useDispatch","useAppSelector","useSelector","Alert","React","props","ref","elevation","variant","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","InputWithButton","memo","addItem","inputLabel","disabled","useState","inputTitleValue","setInputTitleValue","setError","onInputChange","useCallback","currentTarget","value","onButtonClick","trim","onFieldKeyPress","key","TextField","onChange","onKeyPress","helperText","size","label","style","borderColor","className","textField","Fab","marginLeft","backgroundColor","color","onClick","EditableSpan","updateTitle","labelInput","editMode","setEditMode","spanTitle","setSpanTitle","onFieldBlur","onFieldChange","e","autoFocus","onBlur","onDoubleClick","getTasksForCurrentTodolist","Task","taskID","index","getCurrentTask","taskClassName","Completed","isDone","content","onTaskTitleUpdate","onTaskStatusUpdate","checked","New","onRemoveTaskClick","draggableId","provided","snapshot","dragStyle","boxShadow","isDragging","draggableProps","innerRef","dragHandleProps","Checkbox","IconButton","removeButton","getTodolists","getCurrentTodolist","TasksMap","currentTodolist","tasksForCurrentTodolist","filteredTasks","droppableId","tasksWrapper","droppableProps","ind","placeholder","Todolist","isDisabled","onClickFilterType","todolistWrapper","Paper","padding","todolistHeader","inputWithButtonBlock","buttonName","newTitleTask","buttonsBlock","ButtonGroup","Button","getIsLoggedIn","auth","TodolistList","useEffect","Grid","container","justifyContent","margin","marginBottom","newTodolistTitle","spacing","to","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","formikHelpers","resultAction","match","err","field","setFieldError","resetForm","validate","minHeight","handleSubmit","FormControl","FormLabel","href","target","FormGroup","fieldWrapper","getFieldProps","touched","messageError","type","FormControlLabel","control","Preloader","Box","display","height","alignItems","CircularProgress","appBapStyle","App","onDragEnd","result","source","destination","AppBar","position","Toolbar","edge","mr","Typography","component","flexGrow","progressBar","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc881d9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textField\":\"InputWithButton_textField__3ozey\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksWrapper\":\"TaskMap_tasksWrapper__1b9PD\"};","import axios, {AxiosResponse} from \"axios\";\r\n\r\nexport type TodolistResponseType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type FieldErrorType = { error: string, field: string };\r\nexport type ResponseType<T = {}> = {\r\n    data: T\r\n    fieldsErrors: FieldErrorType[]\r\n    messages: string[]\r\n    resultCode: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    items: TaskType []\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport enum RESULT_CODES {\r\n    success = 0,\r\n    error = 1,\r\n    captchaIsRequired = 10\r\n}\r\n\r\nexport type LoginPayloadDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\nexport type MeDataResponseType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nconst todoInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"10732160-f45a-4879-8e6f-b2819bc13c24\"\r\n    }\r\n});\r\n\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return todoInstance.get<TodolistResponseType[]>('todo-lists')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    createTodolist(title: string) {\r\n        return todoInstance.post<any, AxiosResponse<ResponseType<{ item: TodolistResponseType }>>, { title: string }>('todo-lists', {title})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return todoInstance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return todoInstance.put<any, AxiosResponse<ResponseType>, { title: string }>(`todo-lists/${todolistId}`, {title})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return todoInstance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return todoInstance.post<any, AxiosResponse<ResponseType<{ item: TaskType }>>, { title: string }>(`todo-lists/${todolistId}/tasks`, {title})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    removeTask(todolistId: string, taskId: string) {\r\n        return todoInstance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return todoInstance.put<any, AxiosResponse<ResponseType<TaskType>>, UpdateTaskModelType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    async reorderTask(todolistId: string, taskId: string, replaceableId: string | null) {\r\n        const response = await todoInstance.put(`todo-lists/${todolistId}/tasks/${taskId}/reorder`,\r\n            {putAfterItemId: replaceableId});\r\n        return response.data\r\n    }\r\n};\r\nexport const authAPI = {\r\n    login(data: LoginPayloadDataType) {\r\n        return todoInstance.post<ResponseType, AxiosResponse<ResponseType<{ userId: number }>>, LoginPayloadDataType>('auth/login', data)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    me() {\r\n        return todoInstance.get<ResponseType<MeDataResponseType>>('auth/me')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logout() {\r\n        return todoInstance.delete<ResponseType>('auth/login')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n};\r\n","import {setAppErrorMessage} from '../store/reducers/app/appReducer';\r\nimport {ResponseType} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handleNetworkAppError = (dispatch: Dispatch, error: { message: string }) => {\r\n    const errorMessage = error.message ? error.message : 'Some error';\r\n    dispatch(setAppErrorMessage({errorMessage}))\r\n};\r\nexport const handleServerAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\r\n    const errorMessage = data.messages.length ? data.messages[0] : 'Some error occurred';\r\n    dispatch(setAppErrorMessage({errorMessage}))\r\n};\r\n","import {createTodolist, getToDoLists, removeTodolist, resetTodolistsData} from \"../todolists/todolistReducer\";\r\nimport {RESULT_CODES, TaskType, todolistAPI, UpdateTaskModelType} from \"../../../api/todolist-api\";\r\nimport {AppStateType} from '../../store';\r\nimport {setAppStatus} from '../app/appReducer';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateTaskDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n// T H U N K S\r\nexport const getTasks = createAsyncThunk('tasks/getTasks', async (todolistId: string, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.getTasks(todolistId);\r\n        return {tasks: data.items, todolistId}\r\n    } catch (err) {\r\n        const error = err as AxiosError;\r\n        handleNetworkAppError(thunkAPI.dispatch, error);\r\n        return thunkAPI.rejectWithValue(null)\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const createTask = createAsyncThunk('tasks/createTask', async (params: { todolistId: string, title: string }, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.createTask(params.todolistId, params.title)\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {task: data.data.item}\r\n        } else {\r\n            handleServerAppError(dispatch, data)\r\n            return rejectWithValue(null)\r\n        }\r\n\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const removeTask = createAsyncThunk('tasks/removeTask', async (params: { todolistId: string, taskId: string }, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.removeTask(params.todolistId, params.taskId);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {todolistId: params.todolistId, taskId: params.taskId}\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (params: { todolistId: string, taskId: string, model: UpdateTaskDomainModelType }, {dispatch, rejectWithValue, getState}) => {\r\n    const state = getState() as AppStateType;\r\n    try {\r\n        const currentTask = state.tasks.tasksData[params.todolistId].find(task => task.id === params.taskId);\r\n        if (currentTask) {\r\n            const modelStatus: UpdateTaskModelType = {\r\n                deadline: currentTask.deadline,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                status: currentTask.status,\r\n                title: currentTask.title,\r\n                ...params.model\r\n            };\r\n            dispatch(setAppStatus({status: 'loading'}))\r\n            const data = await todolistAPI.updateTask(params.todolistId, params.taskId, modelStatus);\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                return {todolistId: params.todolistId, taskId: params.taskId, model: params.model}\r\n            } else {\r\n                handleServerAppError(dispatch, data);\r\n                return rejectWithValue(null)\r\n            }\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error)\r\n        return rejectWithValue(null);\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const reorderTask = createAsyncThunk('tasks/reorderTask', async (params: { todolistId: string, draggableTaskIndex: number, replaceableTaskIndex: number | undefined, draggableTaskId: string }, {dispatch, rejectWithValue, getState}) => {\r\n    try {\r\n        const state = getState() as AppStateType;\r\n        if (params.replaceableTaskIndex !== undefined) {\r\n            const replaceableTaskIndex = params.draggableTaskIndex > params.replaceableTaskIndex ?\r\n                params.replaceableTaskIndex - 1 : params.replaceableTaskIndex;\r\n            const replaceableTaskId = params.replaceableTaskIndex > 0 ? state.tasks.tasksData[params.todolistId][replaceableTaskIndex].id : null;\r\n            dispatch(setAppStatus({status: 'loading'}));\r\n            const data = await todolistAPI.reorderTask(params.todolistId, params.draggableTaskId, replaceableTaskId);\r\n            if (data.resultCode === RESULT_CODES.success) {\r\n                return {\r\n                        todolistId: params.todolistId,\r\n                        draggableTaskIndex: params.draggableTaskIndex,\r\n                        replaceableTaskIndex: params.replaceableTaskIndex\r\n                    }\r\n            } else {\r\n                handleServerAppError(dispatch, data);\r\n                return rejectWithValue(null)\r\n            }\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null);\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nconst initialState = {\r\n    tasksData: {} as TasksType,\r\n    replacementTask: {} as TaskType\r\n};\r\nexport type InitialStateTasksType = typeof initialState;\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers(builder) {\r\n        builder.addCase(createTodolist.fulfilled, (state, action) => {\r\n            state.tasksData[action.payload.todolist.id] = [];\r\n        })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                delete state.tasksData[action.payload.todolistID];\r\n            })\r\n            .addCase(getToDoLists.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach(tl => state.tasksData[tl.id] = [])\r\n            })\r\n            .addCase(resetTodolistsData, (state) => {\r\n                state.tasksData = {}\r\n            })\r\n            .addCase(getTasks.fulfilled, (state, action) => {\r\n                state.tasksData[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(createTask.fulfilled, (state, action) => {\r\n                state.tasksData[action.payload.task.todoListId].unshift(action.payload.task);\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state.tasksData[action.payload.todolistId];\r\n                const taskIndex = tasks.findIndex(task => task.id === action.payload.taskId);\r\n                if (taskIndex > -1) {\r\n                    tasks.splice(taskIndex, 1);\r\n                }\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    const tasks = state.tasksData[action.payload.todolistId];\r\n                    const taskIndex = tasks.findIndex(task => {\r\n                        if (action.payload) {\r\n                            return task.id === action.payload.taskId\r\n                        }\r\n                    });\r\n                    if (taskIndex > -1) {\r\n                        tasks[taskIndex] = {...tasks[taskIndex], ...action.payload.model};\r\n                    }\r\n                }\r\n\r\n            })\r\n            .addCase(reorderTask.fulfilled,(state, action) => {\r\n                if (action.payload) {\r\n                    const {todolistId, draggableTaskIndex, replaceableTaskIndex} = action.payload;\r\n                    const currentTasks = state.tasksData[todolistId];\r\n                    const [reorderedTask] = currentTasks.splice(draggableTaskIndex, 1);\r\n                    currentTasks.splice(replaceableTaskIndex, 0, reorderedTask);\r\n                }\r\n            })\r\n    }\r\n});\r\nexport const tasksReducer = slice.reducer;\r\n","import {RESULT_CODES, todolistAPI, TodolistResponseType} from \"../../../api/todolist-api\";\r\nimport {RequestStatusType, setAppStatus} from '../app/appReducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {getTasks} from '../tasks/tasksReducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type FilterValueType = 'All' | 'Active' | 'Completed'\r\nexport type TodolistType = TodolistResponseType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType,\r\n}\r\n\r\n// T H U N K S\r\n\r\nexport const getToDoLists = createAsyncThunk('todolists/getToDoLists', async (_, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.getTodolists();\r\n        data.forEach((todolist => {\r\n            dispatch(getTasks(todolist.id))\r\n        }));\r\n        return {todolists: data}\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\n\r\nexport const createTodolist = createAsyncThunk('todolists/createTodolist', async (title: string, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.createTodolist(title);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {todolist: data.data.item}\r\n        } else {\r\n            handleServerAppError(dispatch, data)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error)\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const removeTodolist = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        dispatch(changeToDoListsEntityStatus({todolistId: todolistId, entityStatus: 'loading'}));\r\n        const data = await todolistAPI.deleteTodolist(todolistId);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {todolistID: todolistId}\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}));\r\n        dispatch(changeToDoListsEntityStatus({todolistId: todolistId, entityStatus: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const updateTodolistTitle = createAsyncThunk('todolists/updateTodolistTitle', async (params: { todolistId: string, title: string }, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await todolistAPI.updateTodolist(params.todolistId, params.title);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            return {todolistID: params.todolistId, newTitle: params.title}\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nconst initialState: TodolistType[] = [];\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        changeFilter(state, action: PayloadAction<{ todolistID: string, filterType: FilterValueType }>) {\r\n            const todoIndex = state.findIndex(td => td.id === action.payload.todolistID);\r\n            if (todoIndex > -1) {\r\n                state[todoIndex].filter = action.payload.filterType;\r\n            }\r\n        },\r\n        changeToDoListsEntityStatus(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n            const todoIndex = state.findIndex(td => td.id === action.payload.todolistId);\r\n            if (todoIndex > -1) {\r\n                state[todoIndex].entityStatus = action.payload.entityStatus;\r\n            }\r\n        },\r\n        resetTodolistsData() {\r\n            return [];\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(getToDoLists.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(td => ({...td, filter: 'All', entityStatus: 'idle'}));\r\n        })\r\n            .addCase(createTodolist.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: \"All\", entityStatus: 'idle'});\r\n            })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const todoIndex = state.findIndex(td => td.id === action.payload.todolistID);\r\n                if (todoIndex > -1) {\r\n                    state.splice(todoIndex, 1);\r\n                }\r\n            })\r\n            .addCase(updateTodolistTitle.fulfilled, (state, action) => {\r\n                const todoIndex = state.findIndex(td => td.id === action.payload.todolistID);\r\n                if (todoIndex > -1) {\r\n                    state[todoIndex].title = action.payload.newTitle;\r\n                }\r\n            });\r\n    }\r\n\r\n});\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    changeFilter,\r\n    changeToDoListsEntityStatus,\r\n    resetTodolistsData\r\n} = slice.actions;\r\n\r\n\r\n","import {setAppStatus} from '../app/appReducer';\r\nimport {authAPI, FieldErrorType, LoginPayloadDataType, RESULT_CODES} from '../../../api/todolist-api';\r\nimport {AxiosError} from 'axios';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {resetTodolistsData} from '../todolists/todolistReducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type AuthInitialStateType = typeof initialState;\r\n\r\n// T H U N K S\r\nexport const login = createAsyncThunk<undefined, Omit<LoginPayloadDataType, 'captcha'>, { rejectValue: { errors: string[], fieldsErrors?: FieldErrorType[] } }>('auth/login', async (params, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        const data = await authAPI.login(params);\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (_, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        dispatch(setAppStatus({status: 'idle'}));\r\n        const data = await authAPI.logout();\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            dispatch(resetTodolistsData())\r\n        } else {\r\n            handleServerAppError(dispatch, data)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n});\r\nconst initialState = {\r\n    isLoggedIn: false\r\n};\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true;\r\n        })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false;\r\n            })\r\n    }\r\n});\r\nexport const {setIsLoggedIn} = slice.actions;\r\nexport const authReducer = slice.reducer;\r\n\r\n\r\n\r\n","import {NullableType} from '../../store';\r\nimport {authAPI, RESULT_CODES} from '../../../api/todolist-api';\r\nimport {handleNetworkAppError, handleServerAppError} from '../../../utils/error_utils';\r\nimport {AxiosError} from 'axios';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {setIsLoggedIn} from '../auth/authReducer';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type InitialAppStateType = typeof initialAppState;\r\n\r\n// T H U N K S\r\nexport const initializeApp = createAsyncThunk('app/initializeApp', async (_, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        const data = await authAPI.me();\r\n        if (data.resultCode === RESULT_CODES.success) {\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}));\r\n        } else {\r\n            handleServerAppError(dispatch, data);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError;\r\n        handleNetworkAppError(dispatch, error);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n\r\n    }\r\n});\r\n\r\nconst initialAppState = {\r\n    status: 'idle' as RequestStatusType,\r\n    errorMessage: null as NullableType<string>,\r\n    isInitialized: false\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialAppState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status;\r\n        },\r\n        setAppErrorMessage(state, action: PayloadAction<{ errorMessage: NullableType<string> }>) {\r\n            state.errorMessage = action.payload.errorMessage;\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, state => {\r\n            state.isInitialized = true;\r\n        });\r\n        builder.addCase(initializeApp.rejected, state => {\r\n            state.isInitialized = true;\r\n        });\r\n    }\r\n});\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppStatus, setAppErrorMessage} = slice.actions;\r\n\r\n\r\n","import {AppStateType} from '../store';\r\n\r\nexport const getStatus = (state: AppStateType) => state.app.status;\r\nexport const getIsInitialized = (state: AppStateType) => state.app.isInitialized;\r\nexport const getAppErrorMessage = (state: AppStateType) => state.app.errorMessage;\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {AppDispatch, AppStateType} from './store/store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector;","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {setAppErrorMessage} from '../../store/reducers/app/appReducer';\r\nimport {getAppErrorMessage} from '../../store/selectors/app-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../hooks';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const errorMessage = useAppSelector(getAppErrorMessage);\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorMessage({errorMessage: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={errorMessage !== null} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {errorMessage}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport Fab from \"@mui/material/Fab\";\nimport TextField from \"@mui/material/TextField\";\nimport Add from \"@mui/icons-material/Add\";\nimport style from './InputWithButton.module.css'\n\n\nexport type InputWithButtonPropsType = {\n    buttonName: string\n    addItem: (inputTitleValue: string) => void\n    inputLabel: string\n    disabled?: boolean\n}\n\nexport const InputWithButton = React.memo(({\n                                               addItem,\n                                               inputLabel,\n                                               disabled,\n                                           }: InputWithButtonPropsType) => {\n\n    //local state for input\n    const [inputTitleValue, setInputTitleValue] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    const onInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        setInputTitleValue(event.currentTarget.value);\n        if (error) {\n            setError(false);\n        }\n\n    }, [error]);\n\n    //functionality for button\n    const onButtonClick = useCallback(() => {\n        if (inputTitleValue.trim()) {\n            addItem(inputTitleValue.trim());\n            setInputTitleValue('')\n        } else {\n            setError(true)\n        }\n    }, [addItem, inputTitleValue]);\n\n    const onFieldKeyPress = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            onButtonClick();\n        }\n    }, [onButtonClick]);\n\n    return (\n        <div>\n            <TextField error={error}\n                       onChange={onInputChange}\n                       value={inputTitleValue}\n                       onKeyPress={onFieldKeyPress}\n                       helperText={error ? 'Field is required' : null}\n                       size={\"small\"} id=\"outlined-basic\"\n                       label={inputLabel}\n                       variant=\"outlined\"\n                       disabled={disabled}\n                       style={{borderColor: '#6D88B8'}}\n                       className={style.textField}/>\n            <Fab style={{marginLeft: \"15px\", backgroundColor: '#6D88B8', color: '#ffffff'}}\n                 onClick={onButtonClick}\n                 aria-label=\"add\" size={\"small\"}\n                 disabled={disabled}>\n                <Add/>\n            </Fab>\n        </div>\n    );\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport TextField from \"@mui/material/TextField\";\n\ntype EditableSpanPropsType = {\n    title: string\n    updateTitle: (newTitle: string) => void\n    labelInput: string\n}\n\nexport const EditableSpan = React.memo(({\n                                            title,\n                                            updateTitle,\n                                            labelInput,\n                                        }: EditableSpanPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [spanTitle, setSpanTitle] = useState(title);\n    const [error, setError] = useState<boolean>(false);\n\n    const onFieldDoubleClick = () => {\n        setEditMode(true);\n    };\n\n    const onFieldBlur = useCallback(() => {\n        if (spanTitle.trim()) {\n            setEditMode(false);\n            updateTitle(spanTitle)\n        } else {\n            setError(true)\n        }\n    }, [updateTitle, spanTitle]);\n\n    const onFieldKeyPress = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            onFieldBlur()\n        }\n    }, [onFieldBlur]);\n\n    const onFieldChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setSpanTitle(e.currentTarget.value);\n        if (error) {\n            setError(false);\n        }\n\n    }, [error]);\n\n    return (\n        <>\n            {editMode ?\n                <div>\n                    <TextField onKeyPress={onFieldKeyPress}\n                               autoFocus\n                               onBlur={onFieldBlur} value={spanTitle}\n                               onChange={onFieldChange} id=\"standard-basic\"\n                               label={labelInput}\n                               variant=\"standard\"\n                               size={\"small\"}\n                               error={error}\n                               helperText={error ? \"Field is required\" : null}/>\n                </div>\n                : <span onDoubleClick={onFieldDoubleClick}>{title}</span>}\n        </>\n    );\n});","import {AppStateType} from '../store';\r\n\r\nexport const getTasksForCurrentTodolist = (state: AppStateType, todolistID: string) => state.tasks.tasksData[todolistID];\r\nexport const getCurrentTask = (state: AppStateType, todolistID:string, taskID:string) => state.tasks.tasksData[todolistID].filter(({id}) => id === taskID)[0];\r\nexport const getReplacementTask = (state:AppStateType) =>state.tasks.replacementTask;\r\n","import style from \"./Task.module.css\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport React, {useCallback} from \"react\";\r\nimport {removeTask, updateTask} from \"../../../store/reducers/tasks/tasksReducer\";\r\nimport {TaskStatuses} from \"../../../api/todolist-api\";\r\nimport {getCurrentTask, getReplacementTask} from '../../../store/selectors/tasks-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../../hooks';\r\nimport {Draggable} from 'react-beautiful-dnd';\r\n\r\ntype TaskPropsType = {\r\n    todolistID: string\r\n    taskID: string\r\n    index: number\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    todolistID,\r\n                                    taskID,\r\n                                    index\r\n                                }: TaskPropsType) => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const currentTask = useAppSelector(state => getCurrentTask(state, todolistID, taskID));\r\n    const taskClassName = currentTask.status === TaskStatuses.Completed ? `${style.isDone} ${style.content}` : style.content;\r\n\r\n    const onTaskTitleUpdate = useCallback((title: string) => {\r\n        dispatch(updateTask({todolistId: todolistID, taskId: taskID, model: {title}}))\r\n    }, [dispatch, todolistID, taskID]);\r\n\r\n    const onTaskStatusUpdate = useCallback((event) => {\r\n        const status = event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New;\r\n        dispatch(updateTask({todolistId: todolistID, taskId: taskID, model: {status}}))\r\n    }, [dispatch, todolistID, taskID]);\r\n\r\n    const onRemoveTaskClick = useCallback(() => {\r\n        dispatch(removeTask({todolistId: todolistID, taskId: taskID}))\r\n    }, [dispatch, todolistID, taskID]);\r\n\r\n    return (\r\n        <Draggable draggableId={taskID} index={index}>\r\n            {(provided, snapshot) => {\r\n                const dragStyle = {\r\n                    boxShadow: snapshot.isDragging ? '0 6px 6px hsl(0deg 0% 0% / 0.3)' : '',\r\n                    ...provided.draggableProps.style,\r\n                };\r\n                return (\r\n                    <li className={taskClassName}\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={dragStyle}\r\n                    >\r\n                        <Checkbox checked={currentTask.status === TaskStatuses.Completed}\r\n                                  onChange={onTaskStatusUpdate}\r\n                                  style={{color: 'rgba(98,194,118,0.79)'}}\r\n                                  color={\"success\"}/>\r\n                        <EditableSpan labelInput='Task title' updateTitle={onTaskTitleUpdate}\r\n                                      title={currentTask.title}/>\r\n                        <IconButton className={style.removeButton}\r\n                                    onClick={onRemoveTaskClick}\r\n                                    aria-label=\"delete\" size=\"small\">\r\n                            <Delete style={{color: '#D39BC3'}}/>\r\n                        </IconButton>\r\n\r\n                    </li>\r\n                )\r\n            }}\r\n        </Draggable>\r\n\r\n    )\r\n});","import {AppStateType} from '../store';\r\n\r\nexport const getTodolists = (state: AppStateType) => state.todolists;\r\nexport const getCurrentTodolist = (state: AppStateType, todolistID:string) => state.todolists.filter(({id}) => id === todolistID)[0];","import style from \"./TaskMap.module.css\";\nimport React from \"react\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses} from \"../../api/todolist-api\";\nimport {getTasksForCurrentTodolist} from '../../store/selectors/tasks-selectors';\nimport {getCurrentTodolist} from '../../store/selectors/todolists-selectors';\nimport {useAppSelector} from '../../hooks';\nimport {Draggable, Droppable} from 'react-beautiful-dnd';\n\ntype TasksPropsType = {\n    todolistID: string\n}\n\nexport const TasksMap = React.memo(({todolistID}: TasksPropsType) => {\n\n    const currentTodolist = useAppSelector(state => getCurrentTodolist(state, todolistID));\n    const tasksForCurrentTodolist = useAppSelector(state => getTasksForCurrentTodolist(state, todolistID));\n\n    let filteredTasks = tasksForCurrentTodolist;\n    if (currentTodolist.filter === 'Active') {\n        filteredTasks = tasksForCurrentTodolist.filter(task => task.status === TaskStatuses.New)\n    }\n    if (currentTodolist.filter === 'Completed') {\n        filteredTasks = tasksForCurrentTodolist.filter(task => task.status === TaskStatuses.Completed)\n    }\n\n    return (\n        <Droppable droppableId={todolistID}>\n            {(provided) => (\n                <ul className={style.tasksWrapper}\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                  >\n                    {filteredTasks.map(({id}, ind) => {\n                        return <Task key={id}\n                                     taskID={id}\n                                     todolistID={todolistID}\n                                     index={ind}/>\n                    })}\n                    {provided.placeholder}\n                </ul>\n            )}\n        </Droppable>\n    )\n});\n","import React from \"react\";\r\nimport style from './Todolist.module.css'\r\nimport {TasksMap} from \"../TasksMap/TasksMap\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {InputWithButton} from \"../InputWithButton/InputWithButton\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Close from \"@mui/icons-material/Close\";\r\nimport Button from '@mui/material/Button';\r\nimport {createTask} from \"../../store/reducers/tasks/tasksReducer\";\r\nimport {\r\n    changeFilter,\r\n    FilterValueType,\r\n    removeTodolist,\r\n    TodolistType,\r\n    updateTodolistTitle\r\n} from \"../../store/reducers/todolists/todolistReducer\";\r\nimport Paper from '@mui/material/Paper';\r\nimport {getTasksForCurrentTodolist} from '../../store/selectors/tasks-selectors';\r\nimport {getCurrentTodolist} from '../../store/selectors/todolists-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../hooks';\r\n\r\nexport type TodolistPropsType = {\r\n    todolistID: string\r\n}\r\n\r\nexport const Todolist = ({todolistID}: TodolistPropsType) => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const todolist: TodolistType = useAppSelector((state) => getCurrentTodolist(state, todolistID));\r\n    const tasks = useAppSelector(state => getTasksForCurrentTodolist(state, todolistID));\r\n    const isDisabled = todolist.entityStatus === 'loading';\r\n\r\n    //functionality for removing todolists\r\n    const onClickRemovingTodolistHandler = () => {\r\n        dispatch(removeTodolist(todolistID))\r\n    };\r\n\r\n    //functionality for filtering tasks\r\n    const onClickFilterType = (filterType: FilterValueType) => {\r\n        dispatch(changeFilter({todolistID: todolistID, filterType}))\r\n    };\r\n\r\n    //functionality for adding tasks\r\n    const onClickAddTaskHandler = (newTitleTask: string) => {\r\n        dispatch(createTask({todolistId: todolistID, title: newTitleTask}));\r\n    };\r\n\r\n    //functionality for update todolist\r\n    const onUpdateTodolistTitle = (newTitle: string) => {\r\n        dispatch(updateTodolistTitle({todolistId: todolistID, title: newTitle}))\r\n    };\r\n\r\n    return (\r\n        <div className={style.todolistWrapper}>\r\n            <Paper style={{backgroundColor: '#EBECF0', padding: '1px 20px 20px 20px'}}>\r\n                <div className={style.todolistHeader}>\r\n                    <h3>\r\n                        <EditableSpan labelInput='Todolist title'\r\n                                      title={todolist.title}\r\n                                      updateTitle={onUpdateTodolistTitle}/>\r\n                        <IconButton className={style.removeButton}\r\n                                    onClick={onClickRemovingTodolistHandler}\r\n                                    aria-label=\"delete\" size=\"small\"\r\n                                    disabled={isDisabled}>\r\n                            <Close style={{color: `${isDisabled ? '#C2C2C2' : '#172B4D'}`}}/>\r\n                        </IconButton>\r\n                    </h3>\r\n                </div>\r\n                <div className={style.inputWithButtonBlock}>\r\n                    <InputWithButton inputLabel={'Task title'}\r\n                                     buttonName={'+'}\r\n                                     addItem={onClickAddTaskHandler}\r\n                                     disabled={todolist.entityStatus === 'loading'}/>\r\n                </div>\r\n                <TasksMap todolistID={todolistID}/>\r\n                {tasks && tasks.length > 0 &&\r\n                <div className={style.buttonsBlock}>\r\n                    <ButtonGroup color={\"inherit\"} variant=\"text\" aria-label=\"text button group\">\r\n                        <Button onClick={() => onClickFilterType('All')}\r\n                                variant={todolist.filter === 'All' ? \"contained\" : \"text\"}\r\n                                style={{backgroundColor: `${todolist.filter === 'All' ? '#FBDC97' : ''}`}}>\r\n                            All\r\n                        </Button>\r\n                        <Button onClick={() => onClickFilterType('Active')}\r\n                                variant={todolist.filter === 'Active' ? \"contained\" : \"text\"}\r\n                                style={{backgroundColor: `${todolist.filter === 'Active' ? 'rgba(98,194,118,0.65)' : ''}`}}>\r\n                            Active\r\n                        </Button>\r\n                        <Button onClick={() => onClickFilterType('Completed')}\r\n                                variant={todolist.filter === 'Completed' ? \"contained\" : \"text\"}\r\n                                style={{backgroundColor: `${todolist.filter === 'Completed' ? 'rgba(39,182,186,0.59)' : ''}`}}>\r\n                            Completed\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n                }\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {AppStateType} from '../store';\r\n\r\nexport const getIsLoggedIn = (state: AppStateType) => state.auth.isLoggedIn;","import Grid from \"@mui/material/Grid\";\r\nimport {InputWithButton} from \"../InputWithButton/InputWithButton\"\r\nimport {Todolist} from '../Todolist/Todolist';\r\nimport {createTodolist, getToDoLists} from '../../store/reducers/todolists/todolistReducer';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {useEffect} from 'react';\r\nimport {getIsLoggedIn} from '../../store/selectors/auth-selectors';\r\nimport {getTodolists} from '../../store/selectors/todolists-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../hooks';\r\n\r\nexport const TodolistList = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const isLoggedIn = useAppSelector(getIsLoggedIn);\r\n    const todolists = useAppSelector(getTodolists);\r\n\r\n    //functionality for adding todolists\r\n    const addTodolist = (newTodolistTitle: string) => {\r\n        dispatch(createTodolist(newTodolistTitle))\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getToDoLists())\r\n    }, []);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{justifyContent: 'center', margin: '20px 0', marginBottom: '30px'}}>\r\n                <InputWithButton inputLabel={'Todolist title'}\r\n                                 buttonName={'x'}\r\n                                 addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={5}\r\n                  style={{justifyContent: 'center', marginBottom: '30px'}}>\r\n                {todolists.map(({id}) => {\r\n                    return (\r\n                        <Grid key={id} item>\r\n                            <Todolist todolistID={id}/>\r\n                        </Grid>)\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n};","import TextField from \"@mui/material/TextField\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport {useFormik} from 'formik';\r\nimport style from './Login.module.css';\r\nimport {LoginPayloadDataType} from '../../api/todolist-api';\r\nimport {login} from '../../store/reducers/auth/authReducer';\r\nimport {Navigate} from 'react-router-dom';\r\nimport Paper from '@mui/material/Paper';\r\nimport {getIsLoggedIn} from '../../store/selectors/auth-selectors';\r\nimport {useAppDispatch, useAppSelector} from '../../hooks';\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const isLoggedIn = useAppSelector(getIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        } as Omit<LoginPayloadDataType, 'captcha'>,\r\n        onSubmit: async (values: Omit<LoginPayloadDataType, 'captcha'>, formikHelpers) => {\r\n            const resultAction = await dispatch(login(values));\r\n            if (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    resultAction.payload.fieldsErrors.forEach((err) => {\r\n                        const {field, error} = err;\r\n                        formikHelpers.setFieldError(field, error)\r\n                    })\r\n                }\r\n            } else {\r\n                formik.resetForm()\r\n            }\r\n        },\r\n        validate: (values: Omit<LoginPayloadDataType, 'captcha'>) => {\r\n            const errors: Partial<Omit<LoginPayloadDataType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Field is required';\r\n            } else if (!values.password) {\r\n                errors.password = 'Field is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'The password field must be at least 3 characters'\r\n            }\r\n            return errors;\r\n        }\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'} style={{minHeight: 'calc(100vh - 75px'}}>\r\n            <Grid item>\r\n                <Paper style={{backgroundColor: '#EBECF0', padding: ' 20px'}}>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>\r\n                                    To log in get registered\r\n                                    <a href={'https://social-network.samuraijs.com/'}\r\n                                       target={'_blank'}> here <br/>\r\n                                    </a>\r\n\r\n                                    or use common test account credentials:\r\n                                </p>\r\n                                Email: <b>free@samuraijs.com</b><br/>\r\n                                Password: <b>free</b><br/>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <div className={style.fieldWrapper}>\r\n                                    <TextField label={'Email'}\r\n                                               margin={'normal'}\r\n                                               {...formik.getFieldProps('email')}/>\r\n                                    {formik.errors.email && formik.touched.email &&\r\n                                    <div className={style.messageError}>{formik.errors.email}</div>}\r\n                                </div>\r\n                                <div className={style.fieldWrapper}>\r\n                                    <TextField label={'Password'}\r\n                                               type={'password'}\r\n                                               margin={'normal'}\r\n                                               {...formik.getFieldProps('password')}/>\r\n                                    {formik.errors.password && formik.touched.password &&\r\n                                    <div className={style.messageError}>{formik.errors.password}</div>}\r\n                                </div>\r\n                                <FormControlLabel label={'Remember me'}\r\n                                                  control={\r\n                                                      <Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                                                  style={{marginBottom: '20px'}}/>\r\n                                <Button variant={'contained'} type={'submit'}>\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n};\r\n","import CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <Box sx={{display: 'flex', justifyContent: 'center', height: '100vh', alignItems: 'center'}}>\r\n            <CircularProgress/>\r\n        </Box>\r\n    );\r\n};","import React, {useEffect} from 'react';\r\nimport './App.module.css';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {initializeApp} from './store/reducers/app/appReducer';\r\nimport {ErrorSnackbar} from './components/ErrorSnackar/ErrorSnackbar';\r\nimport {TodolistList} from './components/TodolistList/TodolistList';\r\nimport Container from '@mui/material/Container';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from './components/Login/Login';\r\nimport {Preloader} from './components/Preloader/Preloader';\r\nimport {logout} from './store/reducers/auth/authReducer';\r\nimport style from './App.module.css'\r\nimport {getIsInitialized, getStatus} from './store/selectors/app-selectors';\r\nimport {getIsLoggedIn} from './store/selectors/auth-selectors';\r\nimport {useAppDispatch, useAppSelector} from './hooks';\r\nimport {DragDropContext, DropResult} from 'react-beautiful-dnd';\r\nimport {reorderTask} from './store/reducers/tasks/tasksReducer';\r\n\r\nconst appBapStyle = {\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n    boxShadow: 'none',\r\n    color: 'rgba(255,255,255,0.7)',\r\n};\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const status = useAppSelector(getStatus);\r\n    const isInitialized = useAppSelector(getIsInitialized);\r\n    const isLoggedIn = useAppSelector(getIsLoggedIn);\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logout())\r\n    };\r\n\r\n    const onTaskDragEnd = (result: DropResult) => {\r\n        const draggableTaskIndex = result.source.index;\r\n        const replaceableTaskIndex = result.destination?.index;\r\n        const todolistId = result.source.droppableId;\r\n        const draggableTaskId = result.draggableId;\r\n        dispatch(reorderTask({\r\n            todolistId,\r\n            draggableTaskIndex: draggableTaskIndex,\r\n            replaceableTaskIndex,\r\n            draggableTaskId: result.draggableId\r\n        }))\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onTaskDragEnd}>\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\" style={appBapStyle}>\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            sx={{mr: 2}}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={style.progressBar}>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </div>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path={'/'} element={<TodolistList/>}/>\r\n                        <Route path={'login'} element={<Login/>}/>\r\n                        <Route path={'404'} element={<h1>404 page not found</h1>}/>\r\n                        <Route path={'*'} element={<Navigate to={'404'}/>}/>\r\n                    </Routes>\r\n                </Container>\r\n                <ErrorSnackbar/>\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n}\r\n\r\nexport default App;","import {tasksReducer} from \"./reducers/tasks/tasksReducer\";\r\nimport {todolistsReducer} from \"./reducers/todolists/todolistReducer\";\r\nimport {combineReducers} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {appReducer} from './reducers/app/appReducer';\r\nimport {authReducer} from './reducers/auth/authReducer';\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n});\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type NullableType<T> = null | T;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistWrapper\":\"Todolist_todolistWrapper__2Fdg4\",\"buttonsBlock\":\"Todolist_buttonsBlock__2sEFe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Task_content__3iNop\",\"isDone\":\"Task_isDone__ciiS-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldWrapper\":\"Login_fieldWrapper__2a4qF\",\"messageError\":\"Login_messageError__wAyJF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressBar\":\"App_progressBar__2DEcg\"};"],"sourceRoot":""}